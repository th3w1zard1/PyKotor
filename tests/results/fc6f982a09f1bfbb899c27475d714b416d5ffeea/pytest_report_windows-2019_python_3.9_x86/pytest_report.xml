<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="212" skipped="150" tests="905" time="18.572" timestamp="2024-12-02T05:21:39.838077+00:00" hostname="fv-az657-382"><testcase classname="" name="tests.test_txi_tga_font" time="0.000"><error message="collection failure">ImportError while importing test module 'D:\a\PyKotor\PyKotor\tests\test_txi_tga_font.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\importlib\__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests\test_txi_tga_font.py:10: in &lt;module&gt;
    from pykotor.font.draw import write_bitmap_font, write_bitmap_fonts
Libraries\PyKotorFont\src\pykotor\font\draw.py:10: in &lt;module&gt;
    from pykotor.resource.formats.txi import TXIFontInformation
Libraries\PyKotor\src\pykotor\resource\formats\txi\__init__.py:2: in &lt;module&gt;
    from txi.txi_data import TXIBaseInformation, TXIFontInformation, TXIMaterialInformation, TXITextureInformation
E   ModuleNotFoundError: No module named 'txi'</error></testcase><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_endswith" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_find_closest_match" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_fix_path_formatting" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_get_matching_characters_count" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_hashing" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_new_invalid_argument" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_new_valid_str_argument" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_relative_to_abspath" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_relative_to_abspath_case_sensitive" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_relative_to_relpath" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_relative_to_relpath_case_sensitive" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_valid_name_property" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestCaseAwarePath" name="test_valid_name_property_on_pathlib_path" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestSplitFilename" name="test_invalid_dots" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestSplitFilename" name="test_more_dots_than_parts" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestSplitFilename" name="test_multiple_dots" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestSplitFilename" name="test_negative_dots" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestSplitFilename" name="test_no_dots" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestSplitFilename" name="test_normal" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestIsRelativeTo" name="test_basic" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestIsRelativeTo" name="test_case_insensitive" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestIsRelativeTo" name="test_different_paths" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestIsRelativeTo" name="test_not_path" time="0.000" /><testcase classname="tests.common.test_case_aware_path.TestIsRelativeTo" name="test_relative_paths" time="0.001" /><testcase classname="tests.common.test_case_aware_path.TestIsRelativeTo" name="test_same_path" time="0.001" /><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_add_task" time="0.001"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_async_get_results" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_consumer_start_and_stop" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_discard_remaining_tasks" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_exception_handling_in_task" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_get_results" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_initialization" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_is_running" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_is_running_async" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'loop'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'loop'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_process_remaining_tasks" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_queue_stop_event" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_run_and_process_tasks" time="0.000"><failure message="AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'">E   AttributeError: 'TestConsumerManagerMainThreadAsync' object has no attribute 'manager'</failure></testcase><testcase classname="tests.common.test_consumer_manager.TestConsumerManagerMainThreadAsync" name="test_singleton_behavior" time="0.013"><failure message="RuntimeError: no running event loop">E   RuntimeError: no running event loop</failure></testcase><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_8bit_encoding_only" time="0.204" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_basic" time="0.001" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_bom" time="0.003" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_errors_replace" time="0.002" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_fallback_to_detected_encoding" time="0.008" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_invalid_bytes_for_encoding" time="0.000" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_known_encoding" time="0.000" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_language_detect" time="0.001" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_language_provided" time="0.000" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_no_valid_encoding_found_strict_errors" time="0.007" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_non_ascii" time="0.001" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_strict_error_handling_decoding_failure" time="0.000"><failure message="UnicodeDecodeError: 'ascii' codec can't decode byte 0x80 in position 0: ordinal not in range(128)">E   UnicodeDecodeError: 'ascii' codec can't decode byte 0x80 in position 0: ordinal not in range(128)</failure></testcase><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_undetectable_encoding_replace_errors" time="0.002" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_unknown_encoding" time="0.002" /><testcase classname="tests.common.test_decode_fallbacks.TestDecodeBytes" name="test_with_BOM_included" time="0.001" /><testcase classname="tests.common.test_geometry.TestVector2" name="test_from_vector2" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector2" name="test_from_vector3" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector2" name="test_from_vector4" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector2" name="test_unpacking" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector3" name="test_from_vector2" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector3" name="test_from_vector3" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector3" name="test_from_vector4" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector3" name="test_unpacking" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector4" name="test_from_euler" time="0.001" /><testcase classname="tests.common.test_geometry.TestVector4" name="test_from_vector2" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector4" name="test_from_vector3" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector4" name="test_from_vector4" time="0.000" /><testcase classname="tests.common.test_geometry.TestVector4" name="test_unpacking" time="0.000" /><testcase classname="tests.common.test_geometry.TestFace" name="test_determine_z" time="0.001" /><testcase classname="tests.common.test_geometry.TestPolygon2" name="test_area" time="0.000" /><testcase classname="tests.common.test_geometry.TestPolygon2" name="test_inside" time="0.001" /><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_cascading_file_creation" time="0.001"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:169: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_case_change_after_creation" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:91: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_chmod" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:193: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_complex_case_changes" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:105: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_deep_directory_truediv" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:151: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_hardlink_to" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:271: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_join_with_nonexistent_path" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:39: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_joinpath_chain" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:131: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_make_and_parse_uri" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:59: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_mixed_case_creation_and_deletion" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:118: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_open_read_write" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:206: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_recursive_directory_creation" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:161: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_relative_to" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:178: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_rename" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:247: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_replace" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:230: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_rtruediv" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:50: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_samefile" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:222: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_symlink_to" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:259: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_touch" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:218: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_get_case_sensitive_path.TestCaseAwarePath" name="test_truediv_equivalent_to_joinpath" time="0.000"><skipped type="pytest.skip" message="Test not available on Windows">D:\a\PyKotor\PyKotor\tests\common\test_get_case_sensitive_path.py:45: Test not available on Windows</skipped></testcase><testcase classname="tests.common.test_path_extras.TestPathExtras" name="test_gain_file_access" time="4.645"><failure message="AttributeError: 'WindowsPath' object has no attribute 'has_access'">E   AttributeError: 'WindowsPath' object has no attribute 'has_access'</failure></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_nt_case_hashing" time="0.001" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_path_attributes" time="0.001"><failure message="AssertionError: assert &lt;class 'utility.system.path.Path'&gt; is &lt;class 'pathlib.WindowsPath'&gt;&#10; +  where &lt;class 'utility.system.path.Path'&gt; = &lt;class 'utility.system.path.WindowsPath'&gt;.__base__&#10; +    where &lt;class 'utility.system.path.WindowsPath'&gt; = WindowsPath('mypath').__class__&#10; +      where WindowsPath('mypath') = CaseAwarePath('mypath')">E   AssertionError: assert &lt;class 'utility.system.path.Path'&gt; is &lt;class 'pathlib.WindowsPath'&gt;
     +  where &lt;class 'utility.system.path.Path'&gt; = &lt;class 'utility.system.path.WindowsPath'&gt;.__base__
     +    where &lt;class 'utility.system.path.WindowsPath'&gt; = WindowsPath('mypath').__class__
     +      where WindowsPath('mypath') = CaseAwarePath('mypath')</failure></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_path_hashing" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_path_isinstance" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_path_isinstance" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_posix_path_isinstance" time="0.001"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:150: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_posix_path_isinstance_path" time="0.000"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:164: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_pure_posix_path_isinstance" time="0.000"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:130: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_pure_windows_path_isinstance" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_purepath_not_isinstance_path" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_purepath_not_isinstance_posix_path" time="0.000"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:178: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_purepath_not_isinstance_windows_path" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_windows_path_isinstance" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pathlib_windows_path_isinstance_path" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_posix_path_isinstance" time="0.000"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:95: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_posix_path_isinstance_path" time="0.000"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:105: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pure_posix_path_isinstance" time="0.000"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:81: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_pure_windows_path_isinstance" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_purepath_not_isinstance_path" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_purepath_not_isinstance_posix_path" time="0.001"><skipped type="pytest.skip" message="Test must be run on Posix os">D:\a\PyKotor\PyKotor\tests\common\test_path_isinstance.py:115: Test must be run on Posix os</skipped></testcase><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_purepath_not_isinstance_windows_path" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_windows_path_isinstance" time="0.000" /><testcase classname="tests.common.test_path_isinstance.TestPathInheritance" name="test_windows_path_isinstance_path" time="0.000" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_custom_path_edge_cases_os_specific_case_aware_path" time="0.002" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_custom_path_edge_cases_os_specific_custom_path" time="0.001"><failure message="AssertionError: assert 'C:\\' == 'C:'&#10;  &#10;  - C:&#10;  + C:\&#10;  ?   +">E   AssertionError: assert 'C:\\' == 'C:'
      
      - C:
      + C:\
      ?   +</failure></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_custom_path_edge_cases_os_specific_custom_pure_path" time="0.001"><failure message="AssertionError: assert 'C:\\' == 'C:'&#10;  &#10;  - C:&#10;  + C:\&#10;  ?   +">E   AssertionError: assert 'C:\\' == 'C:'
      
      - C:
      + C:\
      ?   +</failure></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_custom_path_edge_cases_posix_custom_posix_path" time="0.000"><skipped type="pytest.skip" message="Test only supported on POSIX systems.">D:\a\PyKotor\PyKotor\tests\common\test_path_mixed_slash_handling.py:432: Test only supported on POSIX systems.</skipped></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_custom_path_edge_cases_posix_custom_pure_posix_path" time="0.001"><failure message="AssertionError: assert 'C:/Users/test\\' == 'C:/Users/test'&#10;  &#10;  - C:/Users/test&#10;  + C:/Users/test\&#10;  ?              +">E   AssertionError: assert 'C:/Users/test\\' == 'C:/Users/test'
      
      - C:/Users/test
      + C:/Users/test\
      ?              +</failure></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_custom_path_edge_cases_windows_custom_pure_windows_path" time="0.001"><failure message="AssertionError: assert 'C:\\' == 'C:'&#10;  &#10;  - C:&#10;  + C:\&#10;  ?   +">E   AssertionError: assert 'C:\\' == 'C:'
      
      - C:
      + C:\
      ?   +</failure></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_custom_path_edge_cases_windows_custom_windows_path" time="0.001"><failure message="AssertionError: assert 'C:\\' == 'C:'&#10;  &#10;  - C:&#10;  + C:\&#10;  ?   +">E   AssertionError: assert 'C:\\' == 'C:'
      
      - C:
      + C:\
      ?   +</failure></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_low_granular_path_usage" time="0.001" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_pathlib_path_edge_cases_os_specific_path" time="0.001" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_pathlib_path_edge_cases_os_specific_pure_path" time="0.001" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_pathlib_path_edge_cases_posix_posix_path" time="0.000"><skipped type="pytest.skip" message="Test only supported on POSIX systems.">D:\a\PyKotor\PyKotor\tests\common\test_path_mixed_slash_handling.py:211: Test only supported on POSIX systems.</skipped></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_pathlib_path_edge_cases_posix_pure_posix_path" time="0.001" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_pathlib_path_edge_cases_windows_pure_windows_path" time="0.001" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_pathlib_path_edge_cases_windows_windows_path" time="0.001" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_posix_case_hashing_custom_path" time="0.001"><failure message="AssertionError: assert WindowsPath('test\\path\\to\\nothing') != WindowsPath('tesT\\PATH\\to\\noTHinG')">E   AssertionError: assert WindowsPath('test\\path\\to\\nothing') != WindowsPath('tesT\\PATH\\to\\noTHinG')</failure></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_posix_case_hashing_custom_posix_path" time="0.000"><skipped type="pytest.skip" message="Test only supported on POSIX systems.">D:\a\PyKotor\PyKotor\tests\common\test_path_mixed_slash_handling.py:176: Test only supported on POSIX systems.</skipped></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_posix_case_hashing_custom_pure_posix_path" time="0.000" /><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_posix_exists_alternatives" time="0.000"><skipped type="pytest.skip" message="Test only supported on POSIX systems.">D:\a\PyKotor\PyKotor\tests\common\test_path_mixed_slash_handling.py:89: Test only supported on POSIX systems.</skipped></testcase><testcase classname="tests.common.test_path_mixed_slash_handling.TestPathlibMixedSlashes" name="test_windows_case_hashing_custom_path" time="0.001" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_peek" time="0.001" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_position" time="0.000" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_read" time="0.000" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_remaining" time="0.000" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_seek" time="0.000" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_size" time="0.000" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_skip" time="0.001" /><testcase classname="tests.common.test_stream.TestBinaryReader" name="test_true_size" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_capitalize" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_casefold" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_center" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_count" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_encode" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_endswith" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_expandtabs" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_find" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_format" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_format_map" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_index" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isalnum" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isalpha" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isascii" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isdecimal" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isdigit" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isidentifier" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_islower" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isnumeric" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isprintable" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isspace" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_istitle" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_isupper" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_join" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_ljust" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_lower" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_lstrip" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_partition" time="0.001" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_removeprefix" time="0.001"><failure message="AssertionError: CaseInsensImmutableStr('HelloWorld').removeprefix('HELLO',) == HelloWorld&#10;assert MutableStr('World') == 'HelloWorld'&#10;  &#10;  - HelloWorld&#10;  + World">E   AssertionError: CaseInsensImmutableStr('HelloWorld').removeprefix('HELLO',) == HelloWorld
    assert MutableStr('World') == 'HelloWorld'
      
      - HelloWorld
      + World</failure></testcase><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_removesuffix" time="0.001"><failure message="AssertionError: CaseInsensImmutableStr('HelloWorld').removesuffix('WORLD',) == HelloWorld&#10;assert MutableStr('Hello') == 'HelloWorld'&#10;  &#10;  - HelloWorld&#10;  + Hello">E   AssertionError: CaseInsensImmutableStr('HelloWorld').removesuffix('WORLD',) == HelloWorld
    assert MutableStr('Hello') == 'HelloWorld'
      
      - HelloWorld
      + Hello</failure></testcase><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_replace" time="0.001" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_replace_extras" time="0.001" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_rfind" time="0.001"><failure message="AssertionError: CaseInsensImmutableStr('hello').rfind('l', 1, 3) == 1&#10;assert 2 == 1">E   AssertionError: CaseInsensImmutableStr('hello').rfind('l', 1, 3) == 1
    assert 2 == 1</failure></testcase><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_rindex" time="0.001"><failure message="AssertionError: CaseInsensImmutableStr('hello').rindex('l', 1, 3) == 1&#10;assert 2 == 1">E   AssertionError: CaseInsensImmutableStr('hello').rindex('l', 1, 3) == 1
    assert 2 == 1</failure></testcase><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_rjust" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_rpartition" time="0.001"><failure message="AssertionError: Expected str(CaseInsensImmutableStr('hello world world').rpartition('world',)) to match the case-insensitive equivalent of ('hello world ', 'world', ''), but got (MutableStr('hello world '), MutableStr('world'), MutableStr(''))&#10;assert &quot;(mutablestr(...tablestr(''))&quot; == &quot;('hello worl... 'world', '')&quot;&#10;  &#10;  - ('hello world ', 'world', '')&#10;  + (mutablestr('hello world '), mutablestr('world'), mutablestr(''))">E   AssertionError: Expected str(CaseInsensImmutableStr('hello world world').rpartition('world',)) to match the case-insensitive equivalent of ('hello world ', 'world', ''), but got (MutableStr('hello world '), MutableStr('world'), MutableStr(''))
    assert "(mutablestr(...tablestr(''))" == "('hello worl... 'world', '')"
      
      - ('hello world ', 'world', '')
      + (mutablestr('hello world '), mutablestr('world'), mutablestr(''))</failure></testcase><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_rsplit" time="0.001"><failure message="AssertionError: Expected str(CaseInsensImmutableStr('hello world').rsplit()) to match the case-insensitive equivalent of ['hello', 'world'], but got [MutableStr('hello'), MutableStr('world')]&#10;assert &quot;[mutablestr(...str('world')]&quot; == &quot;['hello', 'world']&quot;&#10;  &#10;  - ['hello', 'world']&#10;  + [mutablestr('hello'), mutablestr('world')]">E   AssertionError: Expected str(CaseInsensImmutableStr('hello world').rsplit()) to match the case-insensitive equivalent of ['hello', 'world'], but got [MutableStr('hello'), MutableStr('world')]
    assert "[mutablestr(...str('world')]" == "['hello', 'world']"
      
      - ['hello', 'world']
      + [mutablestr('hello'), mutablestr('world')]</failure></testcase><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_rstrip" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_split" time="0.001"><failure message="AssertionError: CaseInsensImmutableStr('hello  world').split() == ['hello', '', 'world']&#10;assert ['hello', 'world'] == ['hello', '', 'world']&#10;  &#10;  At index 1 diff: 'world' != ''&#10;  Right contains one more item: 'world'&#10;  &#10;  Full diff:&#10;    [&#10;        'hello',&#10;  -     '',&#10;        'world',&#10;    ]">E   AssertionError: CaseInsensImmutableStr('hello  world').split() == ['hello', '', 'world']
    assert ['hello', 'world'] == ['hello', '', 'world']
      
      At index 1 diff: 'world' != ''
      Right contains one more item: 'world'
      
      Full diff:
        [
            'hello',
      -     '',
            'world',
        ]</failure></testcase><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_splitlines" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_startswith" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_strip" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_swapcase" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_title" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_translate" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_upper" time="0.000" /><testcase classname="tests.common.test_wrapped_case_insens_str.TestCaseInsensImmutableStr" name="test_zfill" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_add" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_bool" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_capitalize" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_casefold" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_center" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_contains" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_count" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_dir" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_encode" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_endswith" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_eq" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_expandtabs" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_find" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_format" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_format_map" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_format_spec" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_ge" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_getitem" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_getnewargs" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_getstate" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_gt" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_hash" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_index" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_init" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isalnum" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isalpha" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isascii" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isdecimal" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isdigit" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isidentifier" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_islower" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isnumeric" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isprintable" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isspace" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_istitle" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_isupper" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_iter" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_join" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_le" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_len" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_ljust" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_lower" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_lstrip" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_lt" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_mod" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_mul" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_ne" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_partition" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_reduce" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_reduce_ex" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_removeprefix" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_removesuffix" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_replace" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_repr" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_reversed" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_rfind" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_rindex" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_rjust" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_rpartition" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_rsplit" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_rstrip" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_sizeof" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_split" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_splitlines" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_startswith" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_str" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_strip" time="0.001" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_subclasshook" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_swapcase" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_title" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_translate" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_upper" time="0.000" /><testcase classname="tests.common.test_wrapped_str.TestMutableStr" name="test_zfill" time="0.000" /><testcase classname="tests.extract.test_capsule.TestCapsule" name="test_add_to_erf_file" time="0.011" /><testcase classname="tests.extract.test_capsule.TestCapsule" name="test_add_to_rim_file" time="0.010" /><testcase classname="tests.extract.test_capsule.TestCapsule" name="test_erf_capsule" time="0.004" /><testcase classname="tests.extract.test_capsule.TestCapsule" name="test_rim_capsule" time="0.005" /><testcase classname="tests.extract.test_chitin.TestCapsule" name="test_k1_chitin" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_chitin.py:43: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_chitin.TestCapsule" name="test_k2_chitin" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_chitin.py:50: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_chitin.TestCapsule" name="test_nwn_chitin" time="0.019"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_chitin.py:36: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_location" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:162: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_locations" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:194: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_resource" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:46: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_resources" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:85: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_sounds" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:328: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_string" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:356: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_strings" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:368: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_texture" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:277: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_installation.TestInstallation" name="test_textures" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\extract\test_installation.py:295: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.extract.test_talktable.TestTalkTable" name="test_batch" time="0.001" /><testcase classname="tests.extract.test_talktable.TestTalkTable" name="test_language" time="0.001" /><testcase classname="tests.extract.test_talktable.TestTalkTable" name="test_size" time="0.001" /><testcase classname="tests.extract.test_talktable.TestTalkTable" name="test_string" time="0.001" /><testcase classname="tests.extract.test_talktable.TestTalkTable" name="test_voiceover" time="0.001" /><testcase classname="tests.resource.formats.test_erf.TestERF" name="test_binary_io" time="0.002" /><testcase classname="tests.resource.formats.test_erf.TestERF" name="test_read_raises" time="0.001" /><testcase classname="tests.resource.formats.test_erf.TestERF" name="test_write_raises" time="0.000" /><testcase classname="tests.resource.formats.test_gff.TestGFF" name="test_binary_io" time="0.002" /><testcase classname="tests.resource.formats.test_gff.TestGFF" name="test_read_raises" time="0.001" /><testcase classname="tests.resource.formats.test_gff.TestGFF" name="test_write_raises" time="0.000" /><testcase classname="tests.resource.formats.test_gff.TestGFF" name="test_xml_io" time="0.002" /><testcase classname="tests.resource.formats.test_lip.TestLIP" name="test_binary_io" time="0.001" /><testcase classname="tests.resource.formats.test_lip.TestLIP" name="test_read_raises" time="0.001" /><testcase classname="tests.resource.formats.test_lip.TestLIP" name="test_write_raises" time="0.000" /><testcase classname="tests.resource.formats.test_lip.TestLIP" name="test_xml_io" time="0.001" /><testcase classname="tests.resource.formats.test_lyt.TestLYT" name="test_binary_io" time="0.001" /><testcase classname="tests.resource.formats.test_lyt.TestLYT" name="test_read_raises" time="0.001" /><testcase classname="tests.resource.formats.test_lyt.TestLYT" name="test_write_raises" time="0.000" /><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k1_bizarre_compiler" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k1_bizarre_compiler&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_bizarre_compiler&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k1_bizarre_compiler&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_bizarre_compiler&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k1_compile_nss" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k1_compile_nss&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_compile_nss&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k1_compile_nss&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_compile_nss&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k1_inbuilt_compiler" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k1_inbuilt_compiler&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_inbuilt_compiler&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k1_inbuilt_compiler&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_inbuilt_compiler&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k1_nwnnsscomp_compiles" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k1_nwnnsscomp_compiles&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_nwnnsscomp_compiles&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k1_nwnnsscomp_compiles&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k1_nwnnsscomp_compiles&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k2_bizarre_compiler" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k2_bizarre_compiler&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_bizarre_compiler&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k2_bizarre_compiler&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_bizarre_compiler&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k2_compile_nss" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k2_compile_nss&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_compile_nss&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k2_compile_nss&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_compile_nss&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k2_inbuilt_compiler" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k2_inbuilt_compiler&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_inbuilt_compiler&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k2_inbuilt_compiler&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_inbuilt_compiler&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compile_installation.TestCompileInstallation" name="test_k2_nwnnsscomp_compiles" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;Stack Trace Variables:&#10;&#10;Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:&#10;  self = &lt;TestCaseFunction test_k2_nwnnsscomp_compiles&gt;&#10;  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_nwnnsscomp_compiles&gt;&#10;  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'&#10;Traceback (most recent call last):&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py&quot;, line 284, in addSkip&#10;    raise pytest.skip.Exception(reason, _use_item_location=True)&#10;Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.&#10;">Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.

Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
Stack Trace Variables:

Function 'addSkip' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py:284:
  self = &lt;TestCaseFunction test_k2_nwnnsscomp_compiles&gt;
  testcase = &lt;resource.formats.test_ncs_compile_installation.TestCompileInstallation testMethod=test_k2_nwnnsscomp_compiles&gt;
  reason = 'K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.'
Traceback (most recent call last):
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\_pytest\unittest.py", line 284, in addSkip
    raise pytest.skip.Exception(reason, _use_item_location=True)
Skipped: K1_PATH/K2_PATH/NWNNSSCOMP_PATH environment variable is not set or not found on disk.
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addition_assignment_float_float" time="0.032"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 818, in test_addition_assignment_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&#10;  result = &lt;TestCaseFunction test_addition_assignment_float_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addition_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&gt;&#10;&#10;Function 'test_addition_assignment_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:818:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&#10;  script = '\n            void main()\n            {\n                float value = 1.0;\n                value += 2.0;\n\n                PrintFloat(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07759790&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x077596A0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07759790&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,152)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07759790&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 818, in test_addition_assignment_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 818, in test_addition_assignment_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;
  result = &lt;TestCaseFunction test_addition_assignment_float_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;
  method = &lt;bound method TestNSSCompiler.test_addition_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;&gt;

Function 'test_addition_assignment_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:818:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_float&gt;
  script = '\n            void main()\n            {\n                float value = 1.0;\n                value += 2.0;\n\n                PrintFloat(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07759790&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x077596A0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07759790&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,152)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07759790&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 818, in test_addition_assignment_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addition_assignment_float_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 836, in test_addition_assignment_float_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_float_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&#10;  result = &lt;TestCaseFunction test_addition_assignment_float_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_float_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addition_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&gt;&#10;&#10;Function 'test_addition_assignment_float_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:836:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&#10;  script = '\n            void main()\n            {\n                float value = 1.0;\n                value += 2;\n\n                PrintFloat(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x078BAC88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x078BABF8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x078BAC88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,150)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x078BAC88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 836, in test_addition_assignment_float_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 836, in test_addition_assignment_float_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_float_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;
  result = &lt;TestCaseFunction test_addition_assignment_float_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_float_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;
  method = &lt;bound method TestNSSCompiler.test_addition_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;&gt;

Function 'test_addition_assignment_float_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:836:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_float_int&gt;
  script = '\n            void main()\n            {\n                float value = 1.0;\n                value += 2;\n\n                PrintFloat(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x078BAC88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x078BABF8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x078BAC88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,150)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x078BAC88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 836, in test_addition_assignment_float_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addition_assignment_int_float" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 798, in test_addition_assignment_int_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_int_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&#10;  result = &lt;TestCaseFunction test_addition_assignment_int_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_int_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addition_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&gt;&#10;&#10;Function 'test_addition_assignment_int_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:798:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&#10;  script = '\n            void main()\n            {\n                int value = 1;\n                value += 2.0;\n\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0699F0E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0699F058&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0699F0E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,150)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0699F0E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 798, in test_addition_assignment_int_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 798, in test_addition_assignment_int_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_int_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;
  result = &lt;TestCaseFunction test_addition_assignment_int_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_int_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;
  method = &lt;bound method TestNSSCompiler.test_addition_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;&gt;

Function 'test_addition_assignment_int_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:798:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_float&gt;
  script = '\n            void main()\n            {\n                int value = 1;\n                value += 2.0;\n\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0699F0E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0699F058&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0699F0E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,150)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0699F0E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 798, in test_addition_assignment_int_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addition_assignment_int_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 778, in test_addition_assignment_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&#10;  result = &lt;TestCaseFunction test_addition_assignment_int_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addition_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&gt;&#10;&#10;Function 'test_addition_assignment_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:778:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&#10;  script = '\n            void main()\n            {\n                int value = 1;\n                value += 2;\n\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06984550&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069840D0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06984550&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,148)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06984550&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 778, in test_addition_assignment_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 778, in test_addition_assignment_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;
  result = &lt;TestCaseFunction test_addition_assignment_int_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;
  method = &lt;bound method TestNSSCompiler.test_addition_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;&gt;

Function 'test_addition_assignment_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:778:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_int_int&gt;
  script = '\n            void main()\n            {\n                int value = 1;\n                value += 2;\n\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06984550&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069840D0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06984550&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,148)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06984550&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 778, in test_addition_assignment_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addition_assignment_string_string" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 856, in test_addition_assignment_string_string&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_string_string&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&#10;  result = &lt;TestCaseFunction test_addition_assignment_string_string&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addition_assignment_string_string&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addition_assignment_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&gt;&#10;&#10;Function 'test_addition_assignment_string_string' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:856:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&#10;  script = '\n            void main()\n            {\n                string value = &quot;a&quot;;\n                value += &quot;b&quot;;\n\n                PrintString(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069939B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069933D0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069939B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,154)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069939B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 856, in test_addition_assignment_string_string&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 856, in test_addition_assignment_string_string
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_string_string&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;
  result = &lt;TestCaseFunction test_addition_assignment_string_string&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addition_assignment_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addition_assignment_string_string&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;
  method = &lt;bound method TestNSSCompiler.test_addition_assignment_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;&gt;

Function 'test_addition_assignment_string_string' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:856:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addition_assignment_string_string&gt;
  script = '\n            void main()\n            {\n                string value = "a";\n                value += "b";\n\n                PrintString(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069939B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069933D0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069939B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,154)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069939B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 856, in test_addition_assignment_string_string
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addop_float_float" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 205, in test_addop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&#10;  result = &lt;TestCaseFunction test_addop_float_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&gt;&#10;&#10;Function 'test_addop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:205:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&#10;  script = '\n            void main()\n            {\n                float value = 10.0 + 5.0;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E7E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069E7838&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E7E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,93)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E7E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 205, in test_addop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 205, in test_addop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;
  result = &lt;TestCaseFunction test_addop_float_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;
  method = &lt;bound method TestNSSCompiler.test_addop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;&gt;

Function 'test_addop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:205:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_float_float&gt;
  script = '\n            void main()\n            {\n                float value = 10.0 + 5.0;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E7E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069E7838&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E7E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,93)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E7E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 205, in test_addop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addop_int_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 190, in test_addop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&#10;  result = &lt;TestCaseFunction test_addop_int_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&gt;&#10;&#10;Function 'test_addop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:190:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&#10;  script = '\n            void main()\n            {\n                int value = 10 + 5;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x043C8538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06A1B178&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x043C8538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,87)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x043C8538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 190, in test_addop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 190, in test_addop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;
  result = &lt;TestCaseFunction test_addop_int_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;
  method = &lt;bound method TestNSSCompiler.test_addop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;&gt;

Function 'test_addop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:190:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_int_int&gt;
  script = '\n            void main()\n            {\n                int value = 10 + 5;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x043C8538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06A1B178&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x043C8538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,87)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x043C8538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 190, in test_addop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_addop_string_string" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 220, in test_addop_string_string&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addop_string_string&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&#10;  result = &lt;TestCaseFunction test_addop_string_string&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_addop_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_addop_string_string&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_addop_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&gt;&#10;&#10;Function 'test_addop_string_string' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:220:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&#10;  script = '\n            void main()\n            {\n                string value = &quot;abc&quot; + &quot;def&quot;;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06A10538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06A10268&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06A10538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,97)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06A10538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 220, in test_addop_string_string&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 220, in test_addop_string_string
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addop_string_string&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;
  result = &lt;TestCaseFunction test_addop_string_string&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_addop_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_addop_string_string&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;
  method = &lt;bound method TestNSSCompiler.test_addop_string_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;&gt;

Function 'test_addop_string_string' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:220:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_addop_string_string&gt;
  script = '\n            void main()\n            {\n                string value = "abc" + "def";\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06A10538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06A10268&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06A10538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,97)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06A10538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 220, in test_addop_string_string
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_assignment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 704, in test_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&#10;  result = &lt;TestCaseFunction test_assignment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&gt;&#10;&#10;Function 'test_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:704:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n                a = 4;\n\n                PrintInteger(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E39A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069E3910&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E39A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,135)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E39A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 704, in test_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 704, in test_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;
  result = &lt;TestCaseFunction test_assignment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;
  method = &lt;bound method TestNSSCompiler.test_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;&gt;

Function 'test_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:704:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n                a = 4;\n\n                PrintInteger(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E39A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069E3910&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E39A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,135)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E39A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 704, in test_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_assignment_complex" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 723, in test_assignment_complex&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment_complex&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&#10;  result = &lt;TestCaseFunction test_assignment_complex&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_assignment_complex of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment_complex&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_assignment_complex of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&gt;&#10;&#10;Function 'test_assignment_complex' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:723:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n                a = a * 2 + 8;\n\n                PrintInteger(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069FCE08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069FC820&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069FCE08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,143)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069FCE08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 723, in test_assignment_complex&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 723, in test_assignment_complex
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment_complex&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;
  result = &lt;TestCaseFunction test_assignment_complex&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_assignment_complex of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment_complex&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;
  method = &lt;bound method TestNSSCompiler.test_assignment_complex of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;&gt;

Function 'test_assignment_complex' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:723:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_complex&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n                a = a * 2 + 8;\n\n                PrintInteger(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069FCE08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069FC820&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069FCE08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,143)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069FCE08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 723, in test_assignment_complex
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_assignment_string_constant" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 742, in test_assignment_string_constant&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment_string_constant&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&#10;  result = &lt;TestCaseFunction test_assignment_string_constant&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_assignment_string_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment_string_constant&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_assignment_string_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&gt;&#10;&#10;Function 'test_assignment_string_constant' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:742:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&#10;  script = '\n            void main()\n            {\n                string a = &quot;A&quot;;\n\n                PrintString(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E95F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069E9280&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E95F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,116)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E95F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 742, in test_assignment_string_constant&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 742, in test_assignment_string_constant
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment_string_constant&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;
  result = &lt;TestCaseFunction test_assignment_string_constant&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_assignment_string_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment_string_constant&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;
  method = &lt;bound method TestNSSCompiler.test_assignment_string_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;&gt;

Function 'test_assignment_string_constant' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:742:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_constant&gt;
  script = '\n            void main()\n            {\n                string a = "A";\n\n                PrintString(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E95F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069E9280&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E95F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,116)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069E95F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 742, in test_assignment_string_constant
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_assignment_string_enginecall" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 760, in test_assignment_string_enginecall&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment_string_enginecall&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&#10;  result = &lt;TestCaseFunction test_assignment_string_enginecall&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_assignment_string_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignment_string_enginecall&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_assignment_string_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&gt;&#10;&#10;Function 'test_assignment_string_enginecall' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:760:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&#10;  script = '\n            void main()\n            {\n                string a = GetGlobalString(&quot;A&quot;);\n\n                PrintString(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0694E970&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0694E478&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0694E970&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,133)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0694E970&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 760, in test_assignment_string_enginecall&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 760, in test_assignment_string_enginecall
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment_string_enginecall&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;
  result = &lt;TestCaseFunction test_assignment_string_enginecall&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_assignment_string_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignment_string_enginecall&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;
  method = &lt;bound method TestNSSCompiler.test_assignment_string_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;&gt;

Function 'test_assignment_string_enginecall' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:760:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignment_string_enginecall&gt;
  script = '\n            void main()\n            {\n                string a = GetGlobalString("A");\n\n                PrintString(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0694E970&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0694E478&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0694E970&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,133)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0694E970&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 760, in test_assignment_string_enginecall
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_assignmentless_expression" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2461, in test_assignmentless_expression&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignmentless_expression&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&#10;  result = &lt;TestCaseFunction test_assignmentless_expression&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_assignmentless_expression of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_assignmentless_expression&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_assignmentless_expression of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&gt;&#10;&#10;Function 'test_assignmentless_expression' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2461:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&#10;  script = '\n            void main()\n            {\n                int a = 123;\n\n                1;\n                GetCheatCode(1);\n                &quot;abc&quot;;\n\n                PrintInteger(a);\n           ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06955D18&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069557F0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06955D18&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,190)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06955D18&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2461, in test_assignmentless_expression&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2461, in test_assignmentless_expression
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignmentless_expression&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;
  result = &lt;TestCaseFunction test_assignmentless_expression&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_assignmentless_expression of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_assignmentless_expression&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;
  method = &lt;bound method TestNSSCompiler.test_assignmentless_expression of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;&gt;

Function 'test_assignmentless_expression' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2461:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_assignmentless_expression&gt;
  script = '\n            void main()\n            {\n                int a = 123;\n\n                1;\n                GetCheatCode(1);\n                "abc";\n\n                PrintInteger(a);\n           ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06955D18&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069557F0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06955D18&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,190)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06955D18&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2461, in test_assignmentless_expression
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_bidmas" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 372, in test_bidmas&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bidmas&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&#10;  result = &lt;TestCaseFunction test_bidmas&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_bidmas of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bidmas&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_bidmas of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&gt;&#10;&#10;Function 'test_bidmas' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:372:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&#10;  script = '\n            void main()\n            {\n                int value = 2 + (5 * ((0)) + 5) * 3 + 2 - (2 + (2 * 4 - 12 / 2)) / 2;\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06935208&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069350E8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06935208&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,174)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06935208&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 372, in test_bidmas&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 372, in test_bidmas
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bidmas&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;
  result = &lt;TestCaseFunction test_bidmas&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_bidmas of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bidmas&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;
  method = &lt;bound method TestNSSCompiler.test_bidmas of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;&gt;

Function 'test_bidmas' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:372:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bidmas&gt;
  script = '\n            void main()\n            {\n                int value = 2 + (5 * ((0)) + 5) * 3 + 2 - (2 + (2 * 4 - 12 / 2)) / 2;\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06935208&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069350E8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06935208&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,174)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06935208&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 372, in test_bidmas
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_bitwise_and_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 656, in test_bitwise_and_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_and_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&#10;  result = &lt;TestCaseFunction test_bitwise_and_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_and_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_bitwise_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&gt;&#10;&#10;Function 'test_bitwise_and_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:656:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 7 &amp; 2;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069256E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069255B0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069256E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,82)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069256E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 656, in test_bitwise_and_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 656, in test_bitwise_and_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_and_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;
  result = &lt;TestCaseFunction test_bitwise_and_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_and_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;
  method = &lt;bound method TestNSSCompiler.test_bitwise_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;&gt;

Function 'test_bitwise_and_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:656:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_and_op&gt;
  script = '\n            void main()\n            {\n                int a = 7 &amp; 2;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069256E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x069255B0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069256E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,82)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069256E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 656, in test_bitwise_and_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_bitwise_not_int" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 641, in test_bitwise_not_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_not_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&#10;  result = &lt;TestCaseFunction test_bitwise_not_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_not_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_not_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_bitwise_not_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&gt;&#10;&#10;Function 'test_bitwise_not_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:641:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = ~1;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0695AA30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0695A748&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0695AA30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,79)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0695AA30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 641, in test_bitwise_not_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 641, in test_bitwise_not_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_not_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;
  result = &lt;TestCaseFunction test_bitwise_not_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_not_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_not_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;
  method = &lt;bound method TestNSSCompiler.test_bitwise_not_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;&gt;

Function 'test_bitwise_not_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:641:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_not_int&gt;
  script = '\n            void main()\n            {\n                int a = ~1;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0695AA30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0695A748&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0695AA30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,79)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0695AA30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 641, in test_bitwise_not_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_bitwise_or_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 611, in test_bitwise_or_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_or_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&#10;  result = &lt;TestCaseFunction test_bitwise_or_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_or_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_bitwise_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&gt;&#10;&#10;Function 'test_bitwise_or_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:611:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 5 | 2;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068E2D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068E2A60&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068E2D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,82)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068E2D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 611, in test_bitwise_or_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 611, in test_bitwise_or_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_or_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;
  result = &lt;TestCaseFunction test_bitwise_or_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_or_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;
  method = &lt;bound method TestNSSCompiler.test_bitwise_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;&gt;

Function 'test_bitwise_or_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:611:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_or_op&gt;
  script = '\n            void main()\n            {\n                int a = 5 | 2;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068E2D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068E2A60&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068E2D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,82)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068E2D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 611, in test_bitwise_or_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_bitwise_shiftleft_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 671, in test_bitwise_shiftleft_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_shiftleft_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&#10;  result = &lt;TestCaseFunction test_bitwise_shiftleft_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_shiftleft_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_shiftleft_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_bitwise_shiftleft_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&gt;&#10;&#10;Function 'test_bitwise_shiftleft_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:671:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 7 &lt;&lt; 2;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069080B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06908028&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069080B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,83)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069080B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 671, in test_bitwise_shiftleft_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 671, in test_bitwise_shiftleft_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_shiftleft_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;
  result = &lt;TestCaseFunction test_bitwise_shiftleft_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_shiftleft_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_shiftleft_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;
  method = &lt;bound method TestNSSCompiler.test_bitwise_shiftleft_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;&gt;

Function 'test_bitwise_shiftleft_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:671:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftleft_op&gt;
  script = '\n            void main()\n            {\n                int a = 7 &lt;&lt; 2;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069080B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06908028&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069080B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,83)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x069080B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 671, in test_bitwise_shiftleft_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_bitwise_shiftright_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 686, in test_bitwise_shiftright_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_shiftright_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&#10;  result = &lt;TestCaseFunction test_bitwise_shiftright_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_shiftright_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_shiftright_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_bitwise_shiftright_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&gt;&#10;&#10;Function 'test_bitwise_shiftright_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:686:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 7 &gt;&gt; 2;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06901400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06901118&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06901400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,83)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06901400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 686, in test_bitwise_shiftright_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 686, in test_bitwise_shiftright_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_shiftright_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;
  result = &lt;TestCaseFunction test_bitwise_shiftright_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_shiftright_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_shiftright_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;
  method = &lt;bound method TestNSSCompiler.test_bitwise_shiftright_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;&gt;

Function 'test_bitwise_shiftright_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:686:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_shiftright_op&gt;
  script = '\n            void main()\n            {\n                int a = 7 &gt;&gt; 2;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06901400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x06901118&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06901400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,83)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x06901400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 686, in test_bitwise_shiftright_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_bitwise_xor_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 626, in test_bitwise_xor_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_xor_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&#10;  result = &lt;TestCaseFunction test_bitwise_xor_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_xor_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_bitwise_xor_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_bitwise_xor_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&gt;&#10;&#10;Function 'test_bitwise_xor_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:626:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 7 ^ 2;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F9748&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068F9460&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F9748&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,82)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F9748&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 626, in test_bitwise_xor_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 626, in test_bitwise_xor_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_xor_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;
  result = &lt;TestCaseFunction test_bitwise_xor_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_bitwise_xor_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_bitwise_xor_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;
  method = &lt;bound method TestNSSCompiler.test_bitwise_xor_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;&gt;

Function 'test_bitwise_xor_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:626:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_bitwise_xor_op&gt;
  script = '\n            void main()\n            {\n                int a = 7 ^ 2;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F9748&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068F9460&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F9748&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,82)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F9748&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 626, in test_bitwise_xor_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_call_int_with_no_args" time="0.018"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2821, in test_call_int_with_no_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_int_with_no_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&#10;  result = &lt;TestCaseFunction test_call_int_with_no_args&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_call_int_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_int_with_no_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_call_int_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&gt;&#10;&#10;Function 'test_call_int_with_no_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2821:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&#10;  script = '\n            int test()\n            {\n                return 5;\n            }\n\n            void main()\n            {\n                int x = test();\n                PrintInteger(x);\n       ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,91)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F0A90&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068F07A8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F0A90&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,76)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F0A90&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2821, in test_call_int_with_no_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2821, in test_call_int_with_no_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_int_with_no_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;
  result = &lt;TestCaseFunction test_call_int_with_no_args&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_call_int_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_int_with_no_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;
  method = &lt;bound method TestNSSCompiler.test_call_int_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;&gt;

Function 'test_call_int_with_no_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2821:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args&gt;
  script = '\n            int test()\n            {\n                return 5;\n            }\n\n            void main()\n            {\n                int x = test();\n                PrintInteger(x);\n       ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,91)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F0A90&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068F07A8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F0A90&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,76)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068F0A90&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2821, in test_call_int_with_no_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_call_int_with_no_args_and_forward_declared" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2843, in test_call_int_with_no_args_and_forward_declared&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_int_with_no_args_and_forward_declared&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&#10;  result = &lt;TestCaseFunction test_call_int_with_no_args_and_forward_declared&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_call_int_with_no_args_and_forward_declared of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_int_with_no_args_and_forward_declared&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_call_int_with_no_args_and_forward_declared of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&gt;&#10;&#10;Function 'test_call_int_with_no_args_and_forward_declared' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2843:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&#10;  script = '\n            int test();\n\n            int test()\n            {\n                return 5;\n            }\n\n            void main()\n            {\n                int x = test();\n              ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,116)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068ECCE8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068EC9B8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068ECCE8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,101)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068ECCE8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2843, in test_call_int_with_no_args_and_forward_declared&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2843, in test_call_int_with_no_args_and_forward_declared
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_int_with_no_args_and_forward_declared&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;
  result = &lt;TestCaseFunction test_call_int_with_no_args_and_forward_declared&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_call_int_with_no_args_and_forward_declared of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_int_with_no_args_and_forward_declared&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;
  method = &lt;bound method TestNSSCompiler.test_call_int_with_no_args_and_forward_declared of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;&gt;

Function 'test_call_int_with_no_args_and_forward_declared' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2843:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_int_with_no_args_and_forward_declared&gt;
  script = '\n            int test();\n\n            int test()\n            {\n                return 5;\n            }\n\n            void main()\n            {\n                int x = test();\n              ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,116)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068ECCE8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x068EC9B8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068ECCE8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,101)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x068ECCE8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2843, in test_call_int_with_no_args_and_forward_declared
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_call_param_mismatch" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2879, in test_call_param_mismatch&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_param_mismatch&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&#10;  result = &lt;TestCaseFunction test_call_param_mismatch&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_call_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_param_mismatch&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_call_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;&#10;&#10;Function 'test_call_param_mismatch' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2879:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&#10;  source = '\n            int test(int a)\n            {\n                return a;\n            }\n\n            void main()\n            {\n                test(&quot;123&quot;);\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;, '\n            int test(int a)\n            {\n                retu...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            int test(int a)\n            {\n                return a;\n            }\n\n            void main()\n            {\n                test(&quot;123&quot;);\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2879, in test_call_param_mismatch&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2879, in test_call_param_mismatch
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_param_mismatch&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;
  result = &lt;TestCaseFunction test_call_param_mismatch&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_call_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_param_mismatch&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;
  method = &lt;bound method TestNSSCompiler.test_call_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;

Function 'test_call_param_mismatch' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2879:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;
  source = '\n            int test(int a)\n            {\n                return a;\n            }\n\n            void main()\n            {\n                test("123");\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;, '\n            int test(int a)\n            {\n                retu...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            int test(int a)\n            {\n                return a;\n            }\n\n            void main()\n            {\n                test("123");\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_param_mismatch&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2879, in test_call_param_mismatch
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_call_undefined" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2753, in test_call_undefined&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_undefined&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&#10;  result = &lt;TestCaseFunction test_call_undefined&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_call_undefined of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_undefined&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_call_undefined of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;&#10;&#10;Function 'test_call_undefined' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2753:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&#10;  script = '\n            void main()\n            {\n                test(0);\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;, '\n            void main()\n            {\n                test(0);\n   ...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void main()\n            {\n                test(0);\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2753, in test_call_undefined&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2753, in test_call_undefined
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_undefined&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;
  result = &lt;TestCaseFunction test_call_undefined&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_call_undefined of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_undefined&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;
  method = &lt;bound method TestNSSCompiler.test_call_undefined of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;

Function 'test_call_undefined' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2753:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;
  script = '\n            void main()\n            {\n                test(0);\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;, '\n            void main()\n            {\n                test(0);\n   ...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void main()\n            {\n                test(0);\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_undefined&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2753, in test_call_undefined
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_call_void_with_no_args" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2756, in test_call_void_with_no_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_void_with_no_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&#10;  result = &lt;TestCaseFunction test_call_void_with_no_args&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_call_void_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_void_with_no_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_call_void_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&gt;&#10;&#10;Function 'test_call_void_with_no_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2756:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&#10;  script = '\n            void test()\n            {\n                PrintInteger(123);\n            }\n\n            void main()\n            {\n                test();\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,101)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077FB070&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x077EEF10&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077FB070&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,86)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077FB070&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2756, in test_call_void_with_no_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2756, in test_call_void_with_no_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_void_with_no_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;
  result = &lt;TestCaseFunction test_call_void_with_no_args&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_call_void_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_void_with_no_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;
  method = &lt;bound method TestNSSCompiler.test_call_void_with_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;&gt;

Function 'test_call_void_with_no_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2756:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_no_args&gt;
  script = '\n            void test()\n            {\n                PrintInteger(123);\n            }\n\n            void main()\n            {\n                test();\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,101)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077FB070&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x077EEF10&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077FB070&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,86)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077FB070&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2756, in test_call_void_with_no_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_call_void_with_one_arg" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2777, in test_call_void_with_one_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_void_with_one_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&#10;  result = &lt;TestCaseFunction test_call_void_with_one_arg&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_call_void_with_one_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_void_with_one_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_call_void_with_one_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&gt;&#10;&#10;Function 'test_call_void_with_one_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2777:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&#10;  script = '\n            void test(int value)\n            {\n                PrintInteger(value);\n            }\n\n            void main()\n            {\n                test(123);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,112)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07803280&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07803160&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07803280&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,97)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07803280&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2777, in test_call_void_with_one_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2777, in test_call_void_with_one_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_void_with_one_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;
  result = &lt;TestCaseFunction test_call_void_with_one_arg&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_call_void_with_one_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_void_with_one_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;
  method = &lt;bound method TestNSSCompiler.test_call_void_with_one_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;&gt;

Function 'test_call_void_with_one_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2777:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_one_arg&gt;
  script = '\n            void test(int value)\n            {\n                PrintInteger(value);\n            }\n\n            void main()\n            {\n                test(123);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,112)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07803280&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07803160&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07803280&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,97)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07803280&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2777, in test_call_void_with_one_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_call_void_with_two_args" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2798, in test_call_void_with_two_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_void_with_two_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&#10;  result = &lt;TestCaseFunction test_call_void_with_two_args&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_call_void_with_two_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_call_void_with_two_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_call_void_with_two_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&gt;&#10;&#10;Function 'test_call_void_with_two_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2798:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&#10;  script = '\n            void test(int value1, int value2)\n            {\n                PrintInteger(value1);\n                PrintInteger(value2);\n            }\n\n            void main()\n            {\n...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,8,164)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0780E598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0780E250&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0780E598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,149)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0780E598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2798, in test_call_void_with_two_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2798, in test_call_void_with_two_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_void_with_two_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;
  result = &lt;TestCaseFunction test_call_void_with_two_args&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_call_void_with_two_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_call_void_with_two_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;
  method = &lt;bound method TestNSSCompiler.test_call_void_with_two_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;&gt;

Function 'test_call_void_with_two_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2798:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_call_void_with_two_args&gt;
  script = '\n            void test(int value1, int value2)\n            {\n                PrintInteger(value1);\n                PrintInteger(value2);\n            }\n\n            void main()\n            {\n...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,8,164)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0780E598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0780E250&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0780E598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,149)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0780E598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2798, in test_call_void_with_two_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_comment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1755, in test_comment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_comment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&#10;  result = &lt;TestCaseFunction test_comment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_comment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&gt;&#10;&#10;Function 'test_comment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1755:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&#10;  script = '\n            void main()\n            {\n                // int a = &quot;abc&quot;; // [] /*\n                int a = 0;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07959A00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07959550&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07959A00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,121)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07959A00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1755, in test_comment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1755, in test_comment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_comment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;
  result = &lt;TestCaseFunction test_comment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_comment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;
  method = &lt;bound method TestNSSCompiler.test_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;&gt;

Function 'test_comment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1755:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_comment&gt;
  script = '\n            void main()\n            {\n                // int a = "abc"; // [] /*\n                int a = 0;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07959A00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07959550&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07959A00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,121)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07959A00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1755, in test_comment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_compare_greaterthan_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 516, in test_compare_greaterthan_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_greaterthan_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&#10;  result = &lt;TestCaseFunction test_compare_greaterthan_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_compare_greaterthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_greaterthan_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_compare_greaterthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&gt;&#10;&#10;Function 'test_compare_greaterthan_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:516:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10 &gt; 1;\n                int b = 10 &gt; 10;\n                int c = 10 &gt; 20;\n\n                PrintInteger(a);\n                Prin...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07962CB8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x079629D0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07962CB8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,249)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07962CB8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 516, in test_compare_greaterthan_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 516, in test_compare_greaterthan_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_greaterthan_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;
  result = &lt;TestCaseFunction test_compare_greaterthan_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_compare_greaterthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_greaterthan_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;
  method = &lt;bound method TestNSSCompiler.test_compare_greaterthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;&gt;

Function 'test_compare_greaterthan_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:516:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthan_op&gt;
  script = '\n            void main()\n            {\n                int a = 10 &gt; 1;\n                int b = 10 &gt; 10;\n                int c = 10 &gt; 20;\n\n                PrintInteger(a);\n                Prin...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07962CB8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x079629D0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07962CB8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,249)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07962CB8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 516, in test_compare_greaterthan_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_compare_greaterthanorequal_op" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 539, in test_compare_greaterthanorequal_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_greaterthanorequal_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&#10;  result = &lt;TestCaseFunction test_compare_greaterthanorequal_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_compare_greaterthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_greaterthanorequal_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_compare_greaterthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&gt;&#10;&#10;Function 'test_compare_greaterthanorequal_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:539:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10 &gt;= 1;\n                int b = 10 &gt;= 10;\n                int c = 10 &gt;= 20;\n\n                PrintInteger(a);\n                P...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x079725F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07972238&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x079725F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,252)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x079725F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 539, in test_compare_greaterthanorequal_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 539, in test_compare_greaterthanorequal_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_greaterthanorequal_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;
  result = &lt;TestCaseFunction test_compare_greaterthanorequal_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_compare_greaterthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_greaterthanorequal_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;
  method = &lt;bound method TestNSSCompiler.test_compare_greaterthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;&gt;

Function 'test_compare_greaterthanorequal_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:539:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_greaterthanorequal_op&gt;
  script = '\n            void main()\n            {\n                int a = 10 &gt;= 1;\n                int b = 10 &gt;= 10;\n                int c = 10 &gt;= 20;\n\n                PrintInteger(a);\n                P...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x079725F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07972238&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x079725F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,252)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x079725F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 539, in test_compare_greaterthanorequal_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_compare_lessthan_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 562, in test_compare_lessthan_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_lessthan_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&#10;  result = &lt;TestCaseFunction test_compare_lessthan_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_compare_lessthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_lessthan_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_compare_lessthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&gt;&#10;&#10;Function 'test_compare_lessthan_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:562:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10 &lt; 1;\n                int b = 10 &lt; 10;\n                int c = 10 &lt; 20;\n\n                PrintInteger(a);\n                Prin...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0797CF70&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0797C970&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0797CF70&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,249)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0797CF70&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 562, in test_compare_lessthan_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 562, in test_compare_lessthan_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_lessthan_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;
  result = &lt;TestCaseFunction test_compare_lessthan_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_compare_lessthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_lessthan_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;
  method = &lt;bound method TestNSSCompiler.test_compare_lessthan_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;&gt;

Function 'test_compare_lessthan_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:562:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthan_op&gt;
  script = '\n            void main()\n            {\n                int a = 10 &lt; 1;\n                int b = 10 &lt; 10;\n                int c = 10 &lt; 20;\n\n                PrintInteger(a);\n                Prin...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0797CF70&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0797C970&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0797CF70&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,249)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0797CF70&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 562, in test_compare_lessthan_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_compare_lessthanorequal_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 585, in test_compare_lessthanorequal_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_lessthanorequal_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&#10;  result = &lt;TestCaseFunction test_compare_lessthanorequal_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_compare_lessthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_compare_lessthanorequal_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_compare_lessthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&gt;&#10;&#10;Function 'test_compare_lessthanorequal_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:585:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10 &lt;= 1;\n                int b = 10 &lt;= 10;\n                int c = 10 &lt;= 20;\n\n                PrintInteger(a);\n                P...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077E8268&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x077E8FD0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077E8268&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,252)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077E8268&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 585, in test_compare_lessthanorequal_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 585, in test_compare_lessthanorequal_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_lessthanorequal_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;
  result = &lt;TestCaseFunction test_compare_lessthanorequal_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_compare_lessthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_compare_lessthanorequal_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;
  method = &lt;bound method TestNSSCompiler.test_compare_lessthanorequal_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;&gt;

Function 'test_compare_lessthanorequal_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:585:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_compare_lessthanorequal_op&gt;
  script = '\n            void main()\n            {\n                int a = 10 &lt;= 1;\n                int b = 10 &lt;= 10;\n                int c = 10 &lt;= 20;\n\n                PrintInteger(a);\n                P...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077E8268&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x077E8FD0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077E8268&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,252)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x077E8268&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 585, in test_compare_lessthanorequal_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_declaration_float" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2106, in test_declaration_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_declaration_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&#10;  result = &lt;TestCaseFunction test_declaration_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_declaration_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_declaration_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_declaration_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&gt;&#10;&#10;Function 'test_declaration_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2106:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&#10;  script = '\n            void main()\n            {\n                float a;\n                PrintFloat(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0798C5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0798C238&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0798C5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,107)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0798C5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2106, in test_declaration_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2106, in test_declaration_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_declaration_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;
  result = &lt;TestCaseFunction test_declaration_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_declaration_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_declaration_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;
  method = &lt;bound method TestNSSCompiler.test_declaration_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;&gt;

Function 'test_declaration_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2106:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_float&gt;
  script = '\n            void main()\n            {\n                float a;\n                PrintFloat(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0798C5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0798C238&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0798C5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,107)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0798C5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2106, in test_declaration_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_declaration_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2090, in test_declaration_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_declaration_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&#10;  result = &lt;TestCaseFunction test_declaration_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_declaration_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_declaration_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_declaration_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&gt;&#10;&#10;Function 'test_declaration_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2090:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&#10;  script = '\n            void main()\n            {\n                int a;\n                PrintInteger(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A53940&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A53550&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A53940&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,107)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A53940&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2090, in test_declaration_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2090, in test_declaration_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_declaration_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;
  result = &lt;TestCaseFunction test_declaration_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_declaration_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_declaration_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;
  method = &lt;bound method TestNSSCompiler.test_declaration_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;&gt;

Function 'test_declaration_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2090:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_int&gt;
  script = '\n            void main()\n            {\n                int a;\n                PrintInteger(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A53940&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A53550&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A53940&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,107)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A53940&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2090, in test_declaration_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_declaration_string" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2122, in test_declaration_string&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_declaration_string&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&#10;  result = &lt;TestCaseFunction test_declaration_string&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_declaration_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_declaration_string&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_declaration_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&gt;&#10;&#10;Function 'test_declaration_string' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2122:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&#10;  script = '\n            void main()\n            {\n                string a;\n                PrintString(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A61C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A61898&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A61C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,109)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A61C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2122, in test_declaration_string&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2122, in test_declaration_string
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_declaration_string&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;
  result = &lt;TestCaseFunction test_declaration_string&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_declaration_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_declaration_string&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;
  method = &lt;bound method TestNSSCompiler.test_declaration_string of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;&gt;

Function 'test_declaration_string' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2122:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_declaration_string&gt;
  script = '\n            void main()\n            {\n                string a;\n                PrintString(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A61C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A61898&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A61C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,109)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A61C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2122, in test_declaration_string
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_division_assignment" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 974, in test_division_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_division_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&#10;  result = &lt;TestCaseFunction test_division_assignment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_division_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&gt;&#10;&#10;Function 'test_division_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:974:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&#10;  script = '\n            void main()\n            {\n                int value = 12;\n                value /= 2 * 2;\n\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A72040&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A6CBE0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A72040&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,153)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A72040&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 974, in test_division_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 974, in test_division_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_division_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;
  result = &lt;TestCaseFunction test_division_assignment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_division_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;
  method = &lt;bound method TestNSSCompiler.test_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;&gt;

Function 'test_division_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:974:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_division_assignment&gt;
  script = '\n            void main()\n            {\n                int value = 12;\n                value /= 2 * 2;\n\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A72040&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A6CBE0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A72040&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,153)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A72040&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 974, in test_division_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_divop_float_float" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 310, in test_divop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_divop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&#10;  result = &lt;TestCaseFunction test_divop_float_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_divop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_divop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_divop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&gt;&#10;&#10;Function 'test_divop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:310:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&#10;  script = '\n            void main()\n            {\n                float a = 10.0 / 5.0;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A7B5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A7B328&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A7B5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,89)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A7B5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 310, in test_divop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 310, in test_divop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_divop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;
  result = &lt;TestCaseFunction test_divop_float_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_divop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_divop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;
  method = &lt;bound method TestNSSCompiler.test_divop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;&gt;

Function 'test_divop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:310:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_float_float&gt;
  script = '\n            void main()\n            {\n                float a = 10.0 / 5.0;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A7B5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A7B328&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A7B5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,89)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A7B5F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 310, in test_divop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_divop_int_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 295, in test_divop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_divop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&#10;  result = &lt;TestCaseFunction test_divop_int_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_divop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_divop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_divop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&gt;&#10;&#10;Function 'test_divop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:295:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10 / 5;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A83A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A839D0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A83A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,83)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A83A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 295, in test_divop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 295, in test_divop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_divop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;
  result = &lt;TestCaseFunction test_divop_int_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_divop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_divop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;
  method = &lt;bound method TestNSSCompiler.test_divop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;&gt;

Function 'test_divop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:295:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_divop_int_int&gt;
  script = '\n            void main()\n            {\n                int a = 10 / 5;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A83A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A839D0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A83A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,83)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A83A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 295, in test_divop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_do_while_loop" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1437, in test_do_while_loop&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&#10;  result = &lt;TestCaseFunction test_do_while_loop&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_do_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&gt;&#10;&#10;Function 'test_do_while_loop' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1437:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&#10;  script = '\n            void main()\n            {\n                int value = 3;\n                do\n                {\n                    PrintInteger(value);\n                    value -= 1;\n           ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A8DF40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A8DE68&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A8DF40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,225)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A8DF40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1437, in test_do_while_loop&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1437, in test_do_while_loop
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;
  result = &lt;TestCaseFunction test_do_while_loop&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;
  method = &lt;bound method TestNSSCompiler.test_do_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;&gt;

Function 'test_do_while_loop' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1437:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop&gt;
  script = '\n            void main()\n            {\n                int value = 3;\n                do\n                {\n                    PrintInteger(value);\n                    value -= 1;\n           ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A8DF40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A8DE68&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A8DF40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,225)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A8DF40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1437, in test_do_while_loop
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_do_while_loop_scope" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1507, in test_do_while_loop_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&#10;  result = &lt;TestCaseFunction test_do_while_loop_scope&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_do_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&gt;&#10;&#10;Function 'test_do_while_loop_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1507:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&#10;  script = '\n            void main()\n            {\n                int outer = 11;\n                int value = 22;\n                do\n                {\n                    int inner = 33;\n               ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A9B448&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A9B208&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A9B448&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',14,327)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A9B448&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1507, in test_do_while_loop_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1507, in test_do_while_loop_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;
  result = &lt;TestCaseFunction test_do_while_loop_scope&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;
  method = &lt;bound method TestNSSCompiler.test_do_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;&gt;

Function 'test_do_while_loop_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1507:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_scope&gt;
  script = '\n            void main()\n            {\n                int outer = 11;\n                int value = 22;\n                do\n                {\n                    int inner = 33;\n               ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A9B448&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07A9B208&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A9B448&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',14,327)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07A9B448&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1507, in test_do_while_loop_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_do_while_loop_with_break" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1460, in test_do_while_loop_with_break&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop_with_break&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&#10;  result = &lt;TestCaseFunction test_do_while_loop_with_break&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop_with_break&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_do_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&gt;&#10;&#10;Function 'test_do_while_loop_with_break' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1460:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&#10;  script = '\n            void main()\n            {\n                int value = 3;\n                do\n                {\n                    PrintInteger(value);\n                    value -= 1;\n           ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AA6C10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AA6820&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AA6C10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,252)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AA6C10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1460, in test_do_while_loop_with_break&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1460, in test_do_while_loop_with_break
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop_with_break&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;
  result = &lt;TestCaseFunction test_do_while_loop_with_break&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop_with_break&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;
  method = &lt;bound method TestNSSCompiler.test_do_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;&gt;

Function 'test_do_while_loop_with_break' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1460:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_break&gt;
  script = '\n            void main()\n            {\n                int value = 3;\n                do\n                {\n                    PrintInteger(value);\n                    value -= 1;\n           ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AA6C10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AA6820&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AA6C10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,252)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AA6C10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1460, in test_do_while_loop_with_break
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_do_while_loop_with_continue" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1482, in test_do_while_loop_with_continue&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop_with_continue&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&#10;  result = &lt;TestCaseFunction test_do_while_loop_with_continue&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_do_while_loop_with_continue&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_do_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&gt;&#10;&#10;Function 'test_do_while_loop_with_continue' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1482:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&#10;  script = '\n            void main()\n            {\n                int value = 3;\n                do\n                {\n                    PrintInteger(value);\n                    value -= 1;\n           ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ABB190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07ABB100&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ABB190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',12,293)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ABB190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1482, in test_do_while_loop_with_continue&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1482, in test_do_while_loop_with_continue
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop_with_continue&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;
  result = &lt;TestCaseFunction test_do_while_loop_with_continue&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_do_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_do_while_loop_with_continue&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;
  method = &lt;bound method TestNSSCompiler.test_do_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;&gt;

Function 'test_do_while_loop_with_continue' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1482:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_do_while_loop_with_continue&gt;
  script = '\n            void main()\n            {\n                int value = 3;\n                do\n                {\n                    PrintInteger(value);\n                    value -= 1;\n           ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ABB190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07ABB100&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ABB190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',12,293)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ABB190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1482, in test_do_while_loop_with_continue
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_double_prototype" time="0.004" /><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 60, in test_enginecall&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&#10;  result = &lt;TestCaseFunction test_enginecall&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&gt;&#10;&#10;Function 'test_enginecall' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:60:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&#10;  script = '\n            void main()\n            {\n                object oExisting = GetExitingObject();\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ACC6E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AC3868&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ACC6E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,106)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ACC6E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 60, in test_enginecall&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 60, in test_enginecall
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;
  result = &lt;TestCaseFunction test_enginecall&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;&gt;

Function 'test_enginecall' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:60:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall&gt;
  script = '\n            void main()\n            {\n                object oExisting = GetExitingObject();\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ACC6E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AC3868&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ACC6E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,106)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ACC6E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 60, in test_enginecall
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_GetFactionEqual" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 176, in test_enginecall_GetFactionEqual&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_GetFactionEqual&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_GetFactionEqual&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_GetFactionEqual of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_GetFactionEqual&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_GetFactionEqual of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&gt;&#10;&#10;Function 'test_enginecall_GetFactionEqual' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:176:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&#10;  script = '\n            void main()\n            {\n                object oFirst;\n                GetFactionEqual(oFirst);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AD59A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AD5658&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AD59A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,123)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AD59A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 176, in test_enginecall_GetFactionEqual&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 176, in test_enginecall_GetFactionEqual
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_GetFactionEqual&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;
  result = &lt;TestCaseFunction test_enginecall_GetFactionEqual&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_GetFactionEqual of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_GetFactionEqual&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_GetFactionEqual of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;&gt;

Function 'test_enginecall_GetFactionEqual' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:176:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFactionEqual&gt;
  script = '\n            void main()\n            {\n                object oFirst;\n                GetFactionEqual(oFirst);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AD59A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AD5658&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AD59A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,123)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AD59A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 176, in test_enginecall_GetFactionEqual
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_GetFirstObjectInShape_defaults" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 162, in test_enginecall_GetFirstObjectInShape_defaults&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_GetFirstObjectInShape_defaults&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_GetFirstObjectInShape_defaults&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_GetFirstObjectInShape_defaults of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_GetFirstObjectInShape_defaults&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_GetFirstObjectInShape_defaults of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&gt;&#10;&#10;Function 'test_enginecall_GetFirstObjectInShape_defaults' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:162:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&#10;  script = '\n            void main()\n            {\n                int nShape = SHAPE_CUBE;\n                float fSize = 0.0;\n                location lTarget;\n                GetFirstObjectInShape(nShape...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AE1CE8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AE18F8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AE1CE8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,224)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AE1CE8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 162, in test_enginecall_GetFirstObjectInShape_defaults&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 162, in test_enginecall_GetFirstObjectInShape_defaults
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_GetFirstObjectInShape_defaults&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;
  result = &lt;TestCaseFunction test_enginecall_GetFirstObjectInShape_defaults&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_GetFirstObjectInShape_defaults of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_GetFirstObjectInShape_defaults&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_GetFirstObjectInShape_defaults of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;&gt;

Function 'test_enginecall_GetFirstObjectInShape_defaults' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:162:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_GetFirstObjectInShape_defaults&gt;
  script = '\n            void main()\n            {\n                int nShape = SHAPE_CUBE;\n                float fSize = 0.0;\n                location lTarget;\n                GetFirstObjectInShape(nShape...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AE1CE8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AE18F8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AE1CE8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,224)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AE1CE8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 162, in test_enginecall_GetFirstObjectInShape_defaults
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_delay_command_1" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 150, in test_enginecall_delay_command_1&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_delay_command_1&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_delay_command_1&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_delay_command_1 of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_delay_command_1&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_delay_command_1 of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&gt;&#10;&#10;Function 'test_enginecall_delay_command_1' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:150:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&#10;  script = '\n            void main()\n            {\n                object oFirstPlayer = GetFirstPC();\n                DelayCommand(1.0, GiveXPToCreature(oFirstPlayer, 9001));\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF1328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AF1208&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF1328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,176)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF1328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 150, in test_enginecall_delay_command_1&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 150, in test_enginecall_delay_command_1
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_delay_command_1&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;
  result = &lt;TestCaseFunction test_enginecall_delay_command_1&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_delay_command_1 of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_delay_command_1&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_delay_command_1 of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;&gt;

Function 'test_enginecall_delay_command_1' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:150:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_delay_command_1&gt;
  script = '\n            void main()\n            {\n                object oFirstPlayer = GetFirstPC();\n                DelayCommand(1.0, GiveXPToCreature(oFirstPlayer, 9001));\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF1328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AF1208&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF1328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,176)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF1328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 150, in test_enginecall_delay_command_1
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_return_value" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 78, in test_enginecall_return_value&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_return_value&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_return_value&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_return_value of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_return_value&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_return_value of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&gt;&#10;&#10;Function 'test_enginecall_return_value' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:78:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&#10;  script = '\n            void main()\n            {\n                int inescapable = GetAreaUnescapable();\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF5730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AF51A8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF5730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,107)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF5730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 78, in test_enginecall_return_value&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 78, in test_enginecall_return_value
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_return_value&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;
  result = &lt;TestCaseFunction test_enginecall_return_value&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_return_value of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_return_value&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_return_value of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;&gt;

Function 'test_enginecall_return_value' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:78:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_return_value&gt;
  script = '\n            void main()\n            {\n                int inescapable = GetAreaUnescapable();\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF5730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07AF51A8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF5730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,107)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AF5730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 78, in test_enginecall_return_value
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_with_default_params" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 114, in test_enginecall_with_default_params&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_default_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_with_default_params&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_default_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_default_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_with_default_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&gt;&#10;&#10;Function 'test_enginecall_with_default_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:114:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&#10;  script = '\n            void main()\n            {\n                string tag = &quot;something&quot;;\n                object oSomething = GetObjectByTag(tag);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B029E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B026A0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B029E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,150)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B029E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 114, in test_enginecall_with_default_params&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 114, in test_enginecall_with_default_params
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_default_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;
  result = &lt;TestCaseFunction test_enginecall_with_default_params&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_default_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_default_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_with_default_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;&gt;

Function 'test_enginecall_with_default_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:114:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_default_params&gt;
  script = '\n            void main()\n            {\n                string tag = "something";\n                object oSomething = GetObjectByTag(tag);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B029E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B026A0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B029E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,150)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B029E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 114, in test_enginecall_with_default_params
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_with_missing_params" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 136, in test_enginecall_with_missing_params&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_missing_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_with_missing_params&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_missing_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_missing_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_with_missing_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;&#10;&#10;Function 'test_enginecall_with_missing_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:136:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&#10;  script = '\n            void main()\n            {\n                string tag = &quot;something&quot;;\n                object oSomething = GetObjectByTag();\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;, '\n            void main()\n            {\n             ...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void main()\n            {\n                string tag = &quot;something&quot;;\n                object oSomething = GetObjectByTag();\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 136, in test_enginecall_with_missing_params&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 136, in test_enginecall_with_missing_params
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_missing_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;
  result = &lt;TestCaseFunction test_enginecall_with_missing_params&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_missing_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_missing_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_with_missing_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;

Function 'test_enginecall_with_missing_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:136:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;
  script = '\n            void main()\n            {\n                string tag = "something";\n                object oSomething = GetObjectByTag();\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;, '\n            void main()\n            {\n             ...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void main()\n            {\n                string tag = "something";\n                object oSomething = GetObjectByTag();\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_missing_params&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 136, in test_enginecall_with_missing_params
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_with_params" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 94, in test_enginecall_with_params&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_with_params&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_with_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&gt;&#10;&#10;Function 'test_enginecall_with_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:94:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&#10;  script = '\n            void main()\n            {\n                string tag = &quot;something&quot;;\n                int n = 15;\n                object oSomething = GetObjectByTag(tag, n);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B17F40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B17D30&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B17F40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,181)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B17F40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 94, in test_enginecall_with_params&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 94, in test_enginecall_with_params
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;
  result = &lt;TestCaseFunction test_enginecall_with_params&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_with_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;&gt;

Function 'test_enginecall_with_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:94:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_params&gt;
  script = '\n            void main()\n            {\n                string tag = "something";\n                int n = 15;\n                object oSomething = GetObjectByTag(tag, n);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B17F40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B17D30&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B17F40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,181)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B17F40&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 94, in test_enginecall_with_params
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_enginecall_with_too_many_params" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 147, in test_enginecall_with_too_many_params&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_too_many_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&#10;  result = &lt;TestCaseFunction test_enginecall_with_too_many_params&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_too_many_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_enginecall_with_too_many_params&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_enginecall_with_too_many_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;&#10;&#10;Function 'test_enginecall_with_too_many_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:147:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&#10;  script = '\n            void main()\n            {\n                string tag = &quot;something&quot;;\n                object oSomething = GetObjectByTag(&quot;&quot;, 0, &quot;shouldnotbehere&quot;);\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;, '\n            void main()\n            {\n            ...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void main()\n            {\n                string tag = &quot;something&quot;;\n                object oSomething = GetObjectByTag(&quot;&quot;, 0, &quot;shouldnotbehere&quot;);\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 147, in test_enginecall_with_too_many_params&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 147, in test_enginecall_with_too_many_params
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_too_many_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;
  result = &lt;TestCaseFunction test_enginecall_with_too_many_params&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_enginecall_with_too_many_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_enginecall_with_too_many_params&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;
  method = &lt;bound method TestNSSCompiler.test_enginecall_with_too_many_params of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;

Function 'test_enginecall_with_too_many_params' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:147:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;
  script = '\n            void main()\n            {\n                string tag = "something";\n                object oSomething = GetObjectByTag("", 0, "shouldnotbehere");\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;, '\n            void main()\n            {\n            ...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void main()\n            {\n                string tag = "something";\n                object oSomething = GetObjectByTag("", 0, "shouldnotbehere");\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_enginecall_with_too_many_params&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 147, in test_enginecall_with_too_many_params
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_float_notations" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1629, in test_float_notations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_float_notations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&#10;  result = &lt;TestCaseFunction test_float_notations&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_float_notations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_float_notations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_float_notations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&gt;&#10;&#10;Function 'test_float_notations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1629:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&#10;  script = '\n            void main()\n            {\n                PrintFloat(1.0f);\n                PrintFloat(2.0);\n                PrintFloat(3f);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B33490&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B332F8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B33490&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,150)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B33490&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1629, in test_float_notations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1629, in test_float_notations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_float_notations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;
  result = &lt;TestCaseFunction test_float_notations&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_float_notations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_float_notations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;
  method = &lt;bound method TestNSSCompiler.test_float_notations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;&gt;

Function 'test_float_notations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1629:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_float_notations&gt;
  script = '\n            void main()\n            {\n                PrintFloat(1.0f);\n                PrintFloat(2.0);\n                PrintFloat(3f);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B33490&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B332F8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B33490&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,150)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B33490&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1629, in test_float_notations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_for_loop" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1536, in test_for_loop&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&#10;  result = &lt;TestCaseFunction test_for_loop&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_for_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_for_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&gt;&#10;&#10;Function 'test_for_loop' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1536:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&#10;  script = '\n            void main()\n            {\n                int i = 99;\n                for (i = 1; i &lt;= 3; i += 1)\n                {\n                    PrintInteger(i);\n                }\n       ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B3B778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B3B4A8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B3B778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',9,196)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B3B778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1536, in test_for_loop&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1536, in test_for_loop
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;
  result = &lt;TestCaseFunction test_for_loop&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_for_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;
  method = &lt;bound method TestNSSCompiler.test_for_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;&gt;

Function 'test_for_loop' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1536:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop&gt;
  script = '\n            void main()\n            {\n                int i = 99;\n                for (i = 1; i &lt;= 3; i += 1)\n                {\n                    PrintInteger(i);\n                }\n       ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B3B778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B3B4A8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B3B778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',9,196)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B3B778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1536, in test_for_loop
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_for_loop_scope" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1603, in test_for_loop_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&#10;  result = &lt;TestCaseFunction test_for_loop_scope&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_for_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_for_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&gt;&#10;&#10;Function 'test_for_loop_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1603:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&#10;  script = '\n            void main()\n            {\n                int i = 11;\n                int outer = 22;\n                for (i = 0; i &lt;= 5; i += 1)\n                {\n                    int inner =...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B47DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B47BE0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B47DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',13,288)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B47DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1603, in test_for_loop_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1603, in test_for_loop_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;
  result = &lt;TestCaseFunction test_for_loop_scope&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_for_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;
  method = &lt;bound method TestNSSCompiler.test_for_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;&gt;

Function 'test_for_loop_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1603:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_scope&gt;
  script = '\n            void main()\n            {\n                int i = 11;\n                int outer = 22;\n                for (i = 0; i &lt;= 5; i += 1)\n                {\n                    int inner =...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B47DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B47BE0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B47DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',13,288)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B47DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1603, in test_for_loop_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_for_loop_with_break" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1558, in test_for_loop_with_break&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop_with_break&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&#10;  result = &lt;TestCaseFunction test_for_loop_with_break&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_for_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop_with_break&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_for_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&gt;&#10;&#10;Function 'test_for_loop_with_break' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1558:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&#10;  script = '\n            void main()\n            {\n                int i = 99;\n                for (i = 1; i &lt;= 3; i += 1)\n                {\n                    PrintInteger(i);\n                    break;...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B29820&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B29700&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B29820&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,223)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B29820&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1558, in test_for_loop_with_break&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1558, in test_for_loop_with_break
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop_with_break&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;
  result = &lt;TestCaseFunction test_for_loop_with_break&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_for_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop_with_break&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;
  method = &lt;bound method TestNSSCompiler.test_for_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;&gt;

Function 'test_for_loop_with_break' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1558:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_break&gt;
  script = '\n            void main()\n            {\n                int i = 99;\n                for (i = 1; i &lt;= 3; i += 1)\n                {\n                    PrintInteger(i);\n                    break;...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B29820&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B29700&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B29820&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,223)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B29820&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1558, in test_for_loop_with_break
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_for_loop_with_continue" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1579, in test_for_loop_with_continue&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop_with_continue&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&#10;  result = &lt;TestCaseFunction test_for_loop_with_continue&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_for_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_for_loop_with_continue&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_for_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&gt;&#10;&#10;Function 'test_for_loop_with_continue' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1579:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&#10;  script = '\n            void main()\n            {\n                int i = 99;\n                for (i = 1; i &lt;= 3; i += 1)\n                {\n                    PrintInteger(i);\n                    contin...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B541C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B54148&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B541C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,264)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B541C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1579, in test_for_loop_with_continue&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1579, in test_for_loop_with_continue
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop_with_continue&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;
  result = &lt;TestCaseFunction test_for_loop_with_continue&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_for_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_for_loop_with_continue&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;
  method = &lt;bound method TestNSSCompiler.test_for_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;&gt;

Function 'test_for_loop_with_continue' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1579:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_for_loop_with_continue&gt;
  script = '\n            void main()\n            {\n                int i = 99;\n                for (i = 1; i &lt;= 3; i += 1)\n                {\n                    PrintInteger(i);\n                    contin...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B541C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B54148&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B541C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,264)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B541C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1579, in test_for_loop_with_continue
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_global_declarations" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1689, in test_global_declarations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_declarations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&#10;  result = &lt;TestCaseFunction test_global_declarations&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_global_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_declarations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_global_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&gt;&#10;&#10;Function 'test_global_declarations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1689:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&#10;  script = '\n            int INT;\n            float FLOAT;\n            string STRING;\n            location LOCATION;\n            effect EFFECT;\n            talent TALENT;\n            event EVENT;\n       ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B6EB50&gt;,11,229), LexToken((,'(',11,233), function_definition_params, ...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B625B0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B6EB50&gt;,11,229), LexToken((,'(',11,233), function_definition_params, LexTok...&#10;  t1 = LexToken(},'}',14,263)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B6EB50&gt;,11,229), LexToken((,'(',11,233), function_definition_params, ...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1689, in test_global_declarations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1689, in test_global_declarations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_declarations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;
  result = &lt;TestCaseFunction test_global_declarations&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_global_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_declarations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;
  method = &lt;bound method TestNSSCompiler.test_global_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;&gt;

Function 'test_global_declarations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1689:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_declarations&gt;
  script = '\n            int INT;\n            float FLOAT;\n            string STRING;\n            location LOCATION;\n            effect EFFECT;\n            talent TALENT;\n            event EVENT;\n       ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B6EB50&gt;,11,229), LexToken((,'(',11,233), function_definition_params, ...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B625B0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B6EB50&gt;,11,229), LexToken((,'(',11,233), function_definition_params, LexTok...
  t1 = LexToken(},'}',14,263)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B6EB50&gt;,11,229), LexToken((,'(',11,233), function_definition_params, ...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1689, in test_global_declarations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_global_initialization_with_unary" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1738, in test_global_initialization_with_unary&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_initialization_with_unary&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&#10;  result = &lt;TestCaseFunction test_global_initialization_with_unary&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_global_initialization_with_unary of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_initialization_with_unary&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_global_initialization_with_unary of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&gt;&#10;&#10;Function 'test_global_initialization_with_unary' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1738:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&#10;  script = '\n            int INT = -1;\n\n            void main()\n            {\n                PrintInteger(INT);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B72F70&gt;,4,45), LexToken((,'(',4,49), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B6EC58&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B72F70&gt;,4,45), LexToken((,'(',4,49), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,113)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B72F70&gt;,4,45), LexToken((,'(',4,49), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1738, in test_global_initialization_with_unary&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1738, in test_global_initialization_with_unary
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_initialization_with_unary&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;
  result = &lt;TestCaseFunction test_global_initialization_with_unary&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_global_initialization_with_unary of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_initialization_with_unary&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;
  method = &lt;bound method TestNSSCompiler.test_global_initialization_with_unary of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;&gt;

Function 'test_global_initialization_with_unary' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1738:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initialization_with_unary&gt;
  script = '\n            int INT = -1;\n\n            void main()\n            {\n                PrintInteger(INT);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B72F70&gt;,4,45), LexToken((,'(',4,49), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B6EC58&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B72F70&gt;,4,45), LexToken((,'(',4,49), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,113)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B72F70&gt;,4,45), LexToken((,'(',4,49), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1738, in test_global_initialization_with_unary
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_global_initializations" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1713, in test_global_initializations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_initializations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&#10;  result = &lt;TestCaseFunction test_global_initializations&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_global_initializations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_initializations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_global_initializations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&gt;&#10;&#10;Function 'test_global_initializations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1713:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&#10;  script = '\n            int INT = 0;\n            float FLOAT = 0.0;\n            string STRING = &quot;&quot;;\n            vector VECTOR = [0.0, 0.0, 0.0];\n\n            void main()\n            {\n                Pr...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B84340&gt;,7,152), LexToken((,'(',7,156), function_definition_params, Le...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B7B028&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B84340&gt;,7,152), LexToken((,'(',7,156), function_definition_params, LexToken...&#10;  t1 = LexToken(},'}',12,292)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B84340&gt;,7,152), LexToken((,'(',7,156), function_definition_params, Le...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1713, in test_global_initializations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1713, in test_global_initializations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_initializations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;
  result = &lt;TestCaseFunction test_global_initializations&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_global_initializations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_initializations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;
  method = &lt;bound method TestNSSCompiler.test_global_initializations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;&gt;

Function 'test_global_initializations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1713:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_initializations&gt;
  script = '\n            int INT = 0;\n            float FLOAT = 0.0;\n            string STRING = "";\n            vector VECTOR = [0.0, 0.0, 0.0];\n\n            void main()\n            {\n                Pr...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B84340&gt;,7,152), LexToken((,'(',7,156), function_definition_params, Le...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B7B028&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B84340&gt;,7,152), LexToken((,'(',7,156), function_definition_params, LexToken...
  t1 = LexToken(},'}',12,292)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B84340&gt;,7,152), LexToken((,'(',7,156), function_definition_params, Le...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1713, in test_global_initializations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_global_int_addition_assignment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1958, in test_global_int_addition_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_addition_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&#10;  result = &lt;TestCaseFunction test_global_int_addition_assignment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_global_int_addition_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_addition_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_global_int_addition_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&gt;&#10;&#10;Function 'test_global_int_addition_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1958:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&#10;  script = '\n            int global1 = 1;\n            int global2 = 2;\n\n            void main()\n            {\n                int local1 = 3;\n                int local2 = 4;\n\n                global1 += ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B8EA18&gt;,5,77), LexToken((,'(',5,81), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B84550&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B8EA18&gt;,5,77), LexToken((,'(',5,81), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',15,333)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B8EA18&gt;,5,77), LexToken((,'(',5,81), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1958, in test_global_int_addition_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1958, in test_global_int_addition_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_addition_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;
  result = &lt;TestCaseFunction test_global_int_addition_assignment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_global_int_addition_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_addition_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;
  method = &lt;bound method TestNSSCompiler.test_global_int_addition_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;&gt;

Function 'test_global_int_addition_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1958:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_addition_assignment&gt;
  script = '\n            int global1 = 1;\n            int global2 = 2;\n\n            void main()\n            {\n                int local1 = 3;\n                int local2 = 4;\n\n                global1 += ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B8EA18&gt;,5,77), LexToken((,'(',5,81), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B84550&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B8EA18&gt;,5,77), LexToken((,'(',5,81), function_definition_params, LexToken()...
  t1 = LexToken(},'}',15,333)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07B8EA18&gt;,5,77), LexToken((,'(',5,81), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1958, in test_global_int_addition_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_global_int_division_assignment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2039, in test_global_int_division_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_division_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&#10;  result = &lt;TestCaseFunction test_global_int_division_assignment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_global_int_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_division_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_global_int_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&gt;&#10;&#10;Function 'test_global_int_division_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2039:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&#10;  script = '\n            int global1 = 1000;\n            int global2 = 100;\n\n            void main()\n            {\n                int local1 = 10;\n                int local2 = 1;\n\n                globa...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA04F0&gt;,5,82), LexToken((,'(',5,86), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B94100&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA04F0&gt;,5,82), LexToken((,'(',5,86), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',15,392)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA04F0&gt;,5,82), LexToken((,'(',5,86), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2039, in test_global_int_division_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2039, in test_global_int_division_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_division_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;
  result = &lt;TestCaseFunction test_global_int_division_assignment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_global_int_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_division_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;
  method = &lt;bound method TestNSSCompiler.test_global_int_division_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;&gt;

Function 'test_global_int_division_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2039:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_division_assignment&gt;
  script = '\n            int global1 = 1000;\n            int global2 = 100;\n\n            void main()\n            {\n                int local1 = 10;\n                int local2 = 1;\n\n                globa...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA04F0&gt;,5,82), LexToken((,'(',5,86), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07B94100&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA04F0&gt;,5,82), LexToken((,'(',5,86), function_definition_params, LexToken()...
  t1 = LexToken(},'}',15,392)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA04F0&gt;,5,82), LexToken((,'(',5,86), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2039, in test_global_int_division_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_global_int_multiplication_assignment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2012, in test_global_int_multiplication_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_multiplication_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&#10;  result = &lt;TestCaseFunction test_global_int_multiplication_assignment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_global_int_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_multiplication_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_global_int_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&gt;&#10;&#10;Function 'test_global_int_multiplication_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2012:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&#10;  script = '\n            int global1 = 1;\n            int global2 = 10;\n\n            void main()\n            {\n                int local1 = 100;\n                int local2 = 1000;\n\n                globa...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA3190&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BA0BB0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA3190&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',15,396)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA3190&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2012, in test_global_int_multiplication_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2012, in test_global_int_multiplication_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_multiplication_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;
  result = &lt;TestCaseFunction test_global_int_multiplication_assignment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_global_int_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_multiplication_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;
  method = &lt;bound method TestNSSCompiler.test_global_int_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;&gt;

Function 'test_global_int_multiplication_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2012:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_multiplication_assignment&gt;
  script = '\n            int global1 = 1;\n            int global2 = 10;\n\n            void main()\n            {\n                int local1 = 100;\n                int local2 = 1000;\n\n                globa...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA3190&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BA0BB0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA3190&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexToken()...
  t1 = LexToken(},'}',15,396)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BA3190&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2012, in test_global_int_multiplication_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_global_int_subtraction_assignment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1985, in test_global_int_subtraction_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_subtraction_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&#10;  result = &lt;TestCaseFunction test_global_int_subtraction_assignment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_global_int_subtraction_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_global_int_subtraction_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_global_int_subtraction_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&gt;&#10;&#10;Function 'test_global_int_subtraction_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1985:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&#10;  script = '\n            int global1 = 1;\n            int global2 = 10;\n\n            void main()\n            {\n                int local1 = 100;\n                int local2 = 1000;\n\n                globa...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB3A78&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BA7688&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB3A78&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',15,394)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB3A78&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1985, in test_global_int_subtraction_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1985, in test_global_int_subtraction_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_subtraction_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;
  result = &lt;TestCaseFunction test_global_int_subtraction_assignment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_global_int_subtraction_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_global_int_subtraction_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;
  method = &lt;bound method TestNSSCompiler.test_global_int_subtraction_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;&gt;

Function 'test_global_int_subtraction_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1985:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_global_int_subtraction_assignment&gt;
  script = '\n            int global1 = 1;\n            int global2 = 10;\n\n            void main()\n            {\n                int local1 = 100;\n                int local2 = 1000;\n\n                globa...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB3A78&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BA7688&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB3A78&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexToken()...
  t1 = LexToken(},'}',15,394)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB3A78&gt;,5,78), LexToken((,'(',5,82), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1985, in test_global_int_subtraction_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_if" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1179, in test_if&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&#10;  result = &lt;TestCaseFunction test_if&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&gt;&#10;&#10;Function 'test_if' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1179:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&#10;  script = '\n            void main()\n            {\n                if(0)\n                {\n                    PrintInteger(0);\n                }\n\n                if(1)\n                {\n              ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB85F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BB8568&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB85F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',13,242)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB85F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1179, in test_if&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1179, in test_if
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;
  result = &lt;TestCaseFunction test_if&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;
  method = &lt;bound method TestNSSCompiler.test_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;&gt;

Function 'test_if' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1179:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if&gt;
  script = '\n            void main()\n            {\n                if(0)\n                {\n                    PrintInteger(0);\n                }\n\n                if(1)\n                {\n              ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB85F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BB8568&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB85F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',13,242)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BB85F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1179, in test_if
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_if_else" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1219, in test_if_else&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_else&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&#10;  result = &lt;TestCaseFunction test_if_else&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_else&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&gt;&#10;&#10;Function 'test_if_else' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1219:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&#10;  script = '\n            void main()\n            {\n                if (0) {    PrintInteger(0); }\n                else {      PrintInteger(1); }\n\n                if (1) {    PrintInteger(2); }\n           ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BC2AC0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BC2478&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BC2AC0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',9,240)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BC2AC0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1219, in test_if_else&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1219, in test_if_else
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_else&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;
  result = &lt;TestCaseFunction test_if_else&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_else&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;
  method = &lt;bound method TestNSSCompiler.test_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;&gt;

Function 'test_if_else' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1219:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else&gt;
  script = '\n            void main()\n            {\n                if (0) {    PrintInteger(0); }\n                else {      PrintInteger(1); }\n\n                if (1) {    PrintInteger(2); }\n           ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BC2AC0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BC2478&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BC2AC0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',9,240)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BC2AC0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1219, in test_if_else
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_if_else_if" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1240, in test_if_else_if&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_else_if&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&#10;  result = &lt;TestCaseFunction test_if_else_if&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_if_else_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_else_if&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_if_else_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&gt;&#10;&#10;Function 'test_if_else_if' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1240:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&#10;  script = '\n            void main()\n            {\n                if (0)      { PrintInteger(0); }\n                else if (0) { PrintInteger(1); }\n\n                if (1)      { PrintInteger(2); } // hit...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BD4190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BD4100&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BD4190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',15,467)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BD4190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1240, in test_if_else_if&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1240, in test_if_else_if
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_else_if&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;
  result = &lt;TestCaseFunction test_if_else_if&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_if_else_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_else_if&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;
  method = &lt;bound method TestNSSCompiler.test_if_else_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;&gt;

Function 'test_if_else_if' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1240:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if&gt;
  script = '\n            void main()\n            {\n                if (0)      { PrintInteger(0); }\n                else if (0) { PrintInteger(1); }\n\n                if (1)      { PrintInteger(2); } // hit...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BD4190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BD4100&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BD4190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',15,467)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BD4190&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1240, in test_if_else_if
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_if_else_if_else" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1268, in test_if_else_if_else&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_else_if_else&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&#10;  result = &lt;TestCaseFunction test_if_else_if_else&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_if_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_else_if_else&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_if_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&gt;&#10;&#10;Function 'test_if_else_if_else' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1268:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&#10;  script = '\n            void main()\n            {\n                if (0)      { PrintInteger(0); }\n                else if (0) { PrintInteger(1); }\n                else        { PrintInteger(3); } // hit\n...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BE70B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BDEA18&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BE70B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',19,672)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BE70B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1268, in test_if_else_if_else&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1268, in test_if_else_if_else
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_else_if_else&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;
  result = &lt;TestCaseFunction test_if_else_if_else&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_if_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_else_if_else&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;
  method = &lt;bound method TestNSSCompiler.test_if_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;&gt;

Function 'test_if_else_if_else' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1268:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_else_if_else&gt;
  script = '\n            void main()\n            {\n                if (0)      { PrintInteger(0); }\n                else if (0) { PrintInteger(1); }\n                else        { PrintInteger(3); } // hit\n...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BE70B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BDEA18&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BE70B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',19,672)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BE70B8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1268, in test_if_else_if_else
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_if_multiple_conditions" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1203, in test_if_multiple_conditions&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_multiple_conditions&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&#10;  result = &lt;TestCaseFunction test_if_multiple_conditions&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_if_multiple_conditions of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_if_multiple_conditions&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_if_multiple_conditions of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&gt;&#10;&#10;Function 'test_if_multiple_conditions' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1203:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&#10;  script = '\n            void main()\n            {\n                if(1 &amp;&amp; 2 &amp;&amp; 3)\n                {\n                    PrintInteger(0);\n                }\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BEC2B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BEC190&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BEC2B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,156)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BEC2B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1203, in test_if_multiple_conditions&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1203, in test_if_multiple_conditions
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_multiple_conditions&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;
  result = &lt;TestCaseFunction test_if_multiple_conditions&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_if_multiple_conditions of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_if_multiple_conditions&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;
  method = &lt;bound method TestNSSCompiler.test_if_multiple_conditions of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;&gt;

Function 'test_if_multiple_conditions' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1203:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_if_multiple_conditions&gt;
  script = '\n            void main()\n            {\n                if(1 &amp;&amp; 2 &amp;&amp; 3)\n                {\n                    PrintInteger(0);\n                }\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BEC2B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BEC190&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BEC2B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,156)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BEC2B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1203, in test_if_multiple_conditions
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_imported_global_variable" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2070, in test_imported_global_variable&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_imported_global_variable&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&#10;  result = &lt;TestCaseFunction test_imported_global_variable&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_imported_global_variable of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_imported_global_variable&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_imported_global_variable of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&gt;&#10;&#10;Function 'test_imported_global_variable' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2070:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&#10;  otherscript = b'\n            int iExperience = 55;\n        '&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&#10;  script = '\n            #include &quot;otherscript&quot;\n\n            void main()\n            {\n                object oPlayer = GetPCSpeaker();\n                GiveXPToCreature(oPlayer, iExperience);\n            ...&#10;  library = {'otherscript': b'\n            int iExperience = 55;\n        '}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={'otherscript': b'\n            int iExperience = 55;\n        '},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BF7778&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BF7430&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BF7778&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,192)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={'otherscript': b'\n            int iExperience = 55;\n        '},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BF7778&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2070, in test_imported_global_variable&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2070, in test_imported_global_variable
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_imported_global_variable&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;
  result = &lt;TestCaseFunction test_imported_global_variable&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_imported_global_variable of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_imported_global_variable&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;
  method = &lt;bound method TestNSSCompiler.test_imported_global_variable of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;&gt;

Function 'test_imported_global_variable' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2070:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;
  otherscript = b'\n            int iExperience = 55;\n        '

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_imported_global_variable&gt;
  script = '\n            #include "otherscript"\n\n            void main()\n            {\n                object oPlayer = GetPCSpeaker();\n                GiveXPToCreature(oPlayer, iExperience);\n            ...
  library = {'otherscript': b'\n            int iExperience = 55;\n        '}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={'otherscript': b'\n            int iExperience = 55;\n        '},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BF7778&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07BF7430&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BF7778&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,192)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={'otherscript': b'\n            int iExperience = 55;\n        '},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07BF7778&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2070, in test_imported_global_variable
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_include_builtin" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1877, in test_include_builtin&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_include_builtin&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&#10;  result = &lt;TestCaseFunction test_include_builtin&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_include_builtin of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_include_builtin&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_include_builtin of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&gt;&#10;&#10;Function 'test_include_builtin' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1877:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&#10;  otherscript = b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&#10;  script = '\n            #include &quot;otherscript&quot;\n\n            void main()\n            {\n                TestFunc();\n            }\n        '&#10;  library = {'otherscript': b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={'otherscript': b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C03BB0&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C035F8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C03BB0&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,115)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={'otherscript': b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C03BB0&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1877, in test_include_builtin&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1877, in test_include_builtin
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_include_builtin&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;
  result = &lt;TestCaseFunction test_include_builtin&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_include_builtin of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_include_builtin&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;
  method = &lt;bound method TestNSSCompiler.test_include_builtin of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;&gt;

Function 'test_include_builtin' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1877:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;
  otherscript = b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_builtin&gt;
  script = '\n            #include "otherscript"\n\n            void main()\n            {\n                TestFunc();\n            }\n        '
  library = {'otherscript': b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={'otherscript': b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C03BB0&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C035F8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C03BB0&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,115)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={'otherscript': b'\n            void TestFunc()\n            {\n                PrintInteger(123);\n            }\n        '},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C03BB0&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1877, in test_include_builtin
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_include_lookup" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1898, in test_include_lookup&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_include_lookup&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&#10;  result = &lt;TestCaseFunction test_include_lookup&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_include_lookup of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_include_lookup&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_include_lookup of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&gt;&#10;&#10;Function 'test_include_lookup' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1898:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&#10;  includetest_script_path = WindowsPath('D:/a/PyKotor/PyKotor/tests/files')&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&#10;  script = '\n            #include &quot;includetest&quot;\n\n            void main()\n            {\n                TestFunc();\n            }\n        '&#10;  library = {}&#10;  library_lookup = WindowsPath('D:/a/PyKotor/PyKotor/tests/files')&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[WindowsPath('D:/a/PyKotor/PyKotor/tests/files')]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C11E80&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C11DC0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C11E80&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,115)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[WindowsPath('D:/a/PyKotor/PyKotor/tests/files')]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C11E80&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1898, in test_include_lookup&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1898, in test_include_lookup
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_include_lookup&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;
  result = &lt;TestCaseFunction test_include_lookup&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_include_lookup of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_include_lookup&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;
  method = &lt;bound method TestNSSCompiler.test_include_lookup of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;&gt;

Function 'test_include_lookup' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1898:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;
  includetest_script_path = WindowsPath('D:/a/PyKotor/PyKotor/tests/files')

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_include_lookup&gt;
  script = '\n            #include "includetest"\n\n            void main()\n            {\n                TestFunc();\n            }\n        '
  library = {}
  library_lookup = WindowsPath('D:/a/PyKotor/PyKotor/tests/files')
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[WindowsPath('D:/a/PyKotor/PyKotor/tests/files')]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C11E80&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C11DC0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C11E80&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,115)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[WindowsPath('D:/a/PyKotor/PyKotor/tests/files')]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C11E80&gt;,4,54), LexToken((,'(',4,58), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1898, in test_include_lookup
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_int_parenthesis_declaration" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1854, in test_int_parenthesis_declaration&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_int_parenthesis_declaration&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&#10;  result = &lt;TestCaseFunction test_int_parenthesis_declaration&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_int_parenthesis_declaration of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_int_parenthesis_declaration&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_int_parenthesis_declaration of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&gt;&#10;&#10;Function 'test_int_parenthesis_declaration' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1854:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&#10;  script = '\n            void main()\n            {\n                int value = (123);\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C240E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C24058&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C240E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,123)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C240E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1854, in test_int_parenthesis_declaration&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1854, in test_int_parenthesis_declaration
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_int_parenthesis_declaration&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;
  result = &lt;TestCaseFunction test_int_parenthesis_declaration&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_int_parenthesis_declaration of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_int_parenthesis_declaration&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;
  method = &lt;bound method TestNSSCompiler.test_int_parenthesis_declaration of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;&gt;

Function 'test_int_parenthesis_declaration' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1854:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_int_parenthesis_declaration&gt;
  script = '\n            void main()\n            {\n                int value = (123);\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C240E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C24058&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C240E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,123)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C240E8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1854, in test_int_parenthesis_declaration
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_local_declarations" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1669, in test_local_declarations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_local_declarations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&#10;  result = &lt;TestCaseFunction test_local_declarations&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_local_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_local_declarations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_local_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&gt;&#10;&#10;Function 'test_local_declarations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1669:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&#10;  script = '\n            void main()\n            {\n                int INT;\n                float FLOAT;\n                string STRING;\n                location LOCATION;\n                effect EFFECT;\n ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C28460&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C28340&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C28460&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',12,293)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C28460&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1669, in test_local_declarations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1669, in test_local_declarations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_local_declarations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;
  result = &lt;TestCaseFunction test_local_declarations&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_local_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_local_declarations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;
  method = &lt;bound method TestNSSCompiler.test_local_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;&gt;

Function 'test_local_declarations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1669:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_local_declarations&gt;
  script = '\n            void main()\n            {\n                int INT;\n                float FLOAT;\n                string STRING;\n                location LOCATION;\n                effect EFFECT;\n ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C28460&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C28340&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C28460&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',12,293)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C28460&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1669, in test_local_declarations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_logical_and_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 441, in test_logical_and_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_and_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&#10;  result = &lt;TestCaseFunction test_logical_and_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_logical_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_and_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_logical_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&gt;&#10;&#10;Function 'test_logical_and_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:441:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 0 &amp;&amp; 0;\n                int b = 1 &amp;&amp; 0;\n                int c = 1 &amp;&amp; 1;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C34C28&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C34958&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C34C28&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,147)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C34C28&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 441, in test_logical_and_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 441, in test_logical_and_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_and_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;
  result = &lt;TestCaseFunction test_logical_and_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_logical_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_and_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;
  method = &lt;bound method TestNSSCompiler.test_logical_and_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;&gt;

Function 'test_logical_and_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:441:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_and_op&gt;
  script = '\n            void main()\n            {\n                int a = 0 &amp;&amp; 0;\n                int b = 1 &amp;&amp; 0;\n                int c = 1 &amp;&amp; 1;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C34C28&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C34958&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C34C28&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,147)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C34C28&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 441, in test_logical_and_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_logical_equals" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 479, in test_logical_equals&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_equals&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&#10;  result = &lt;TestCaseFunction test_logical_equals&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_logical_equals of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_equals&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_logical_equals of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&gt;&#10;&#10;Function 'test_logical_equals' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:479:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1 == 1;\n                int b = &quot;a&quot; == &quot;b&quot;;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C422B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C42220&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C422B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,119)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C422B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 479, in test_logical_equals&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 479, in test_logical_equals
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_equals&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;
  result = &lt;TestCaseFunction test_logical_equals&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_logical_equals of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_equals&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;
  method = &lt;bound method TestNSSCompiler.test_logical_equals of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;&gt;

Function 'test_logical_equals' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:479:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_equals&gt;
  script = '\n            void main()\n            {\n                int a = 1 == 1;\n                int b = "a" == "b";\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C422B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C42220&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C422B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,119)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C422B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 479, in test_logical_equals
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_logical_notequals_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 496, in test_logical_notequals_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_notequals_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&#10;  result = &lt;TestCaseFunction test_logical_notequals_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_logical_notequals_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_notequals_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_logical_notequals_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&gt;&#10;&#10;Function 'test_logical_notequals_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:496:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1 != 1;\n                int b = 1 != 2;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C4D898&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C4D5C8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C4D898&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,115)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C4D898&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 496, in test_logical_notequals_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 496, in test_logical_notequals_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_notequals_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;
  result = &lt;TestCaseFunction test_logical_notequals_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_logical_notequals_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_notequals_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;
  method = &lt;bound method TestNSSCompiler.test_logical_notequals_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;&gt;

Function 'test_logical_notequals_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:496:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_notequals_op&gt;
  script = '\n            void main()\n            {\n                int a = 1 != 1;\n                int b = 1 != 2;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C4D898&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C4D5C8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C4D898&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,115)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C4D898&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 496, in test_logical_notequals_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_logical_or_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 460, in test_logical_or_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_or_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&#10;  result = &lt;TestCaseFunction test_logical_or_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_logical_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_logical_or_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_logical_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&gt;&#10;&#10;Function 'test_logical_or_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:460:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = 0 || 0;\n                int b = 1 || 0;\n                int c = 1 || 1;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C56E98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C56BB0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C56E98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,147)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C56E98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 460, in test_logical_or_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 460, in test_logical_or_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_or_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;
  result = &lt;TestCaseFunction test_logical_or_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_logical_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_logical_or_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;
  method = &lt;bound method TestNSSCompiler.test_logical_or_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;&gt;

Function 'test_logical_or_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:460:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_logical_or_op&gt;
  script = '\n            void main()\n            {\n                int a = 0 || 0;\n                int b = 1 || 0;\n                int c = 1 || 1;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C56E98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C56BB0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C56E98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,147)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C56E98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 460, in test_logical_or_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_missing_include" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1955, in test_missing_include&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_missing_include&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&#10;  result = &lt;TestCaseFunction test_missing_include&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_missing_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_missing_include&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_missing_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;&#10;&#10;Function 'test_missing_include' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1955:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&#10;  source = '\n            #include &quot;otherscript&quot;\n\n            void main()\n            {\n                TestFunc();\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;, '\n            #include &quot;otherscript&quot;\n\n            void main()\n     ...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            #include &quot;otherscript&quot;\n\n            void main()\n            {\n                TestFunc();\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1955, in test_missing_include&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1955, in test_missing_include
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_missing_include&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;
  result = &lt;TestCaseFunction test_missing_include&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_missing_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_missing_include&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;
  method = &lt;bound method TestNSSCompiler.test_missing_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;

Function 'test_missing_include' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1955:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;
  source = '\n            #include "otherscript"\n\n            void main()\n            {\n                TestFunc();\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;, '\n            #include "otherscript"\n\n            void main()\n     ...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            #include "otherscript"\n\n            void main()\n            {\n                TestFunc();\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_missing_include&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1955, in test_missing_include
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_modop_int_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 325, in test_modop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_modop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&#10;  result = &lt;TestCaseFunction test_modop_int_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_modop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_modop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_modop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&gt;&#10;&#10;Function 'test_modop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:325:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10 % 3;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C705B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C70490&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C705B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,83)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C705B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 325, in test_modop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 325, in test_modop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_modop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;
  result = &lt;TestCaseFunction test_modop_int_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_modop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_modop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;
  method = &lt;bound method TestNSSCompiler.test_modop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;&gt;

Function 'test_modop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:325:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_modop_int_int&gt;
  script = '\n            void main()\n            {\n                int a = 10 % 3;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C705B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C70490&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C705B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,83)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C705B0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 325, in test_modop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_mulop_float_float" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 280, in test_mulop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_mulop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&#10;  result = &lt;TestCaseFunction test_mulop_float_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_mulop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_mulop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_mulop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&gt;&#10;&#10;Function 'test_mulop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:280:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&#10;  script = '\n            void main()\n            {\n                float a = 10.0 * 5.0;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C7A8F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C7A610&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C7A8F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,89)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C7A8F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 280, in test_mulop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 280, in test_mulop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_mulop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;
  result = &lt;TestCaseFunction test_mulop_float_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_mulop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_mulop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;
  method = &lt;bound method TestNSSCompiler.test_mulop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;&gt;

Function 'test_mulop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:280:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_float_float&gt;
  script = '\n            void main()\n            {\n                float a = 10.0 * 5.0;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C7A8F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C7A610&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C7A8F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,89)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C7A8F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 280, in test_mulop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_mulop_int_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 265, in test_mulop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_mulop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&#10;  result = &lt;TestCaseFunction test_mulop_int_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_mulop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_mulop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_mulop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&gt;&#10;&#10;Function 'test_mulop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:265:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10 * 5;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C89D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C89A60&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C89D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,83)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C89D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 265, in test_mulop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 265, in test_mulop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_mulop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;
  result = &lt;TestCaseFunction test_mulop_int_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_mulop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_mulop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;
  method = &lt;bound method TestNSSCompiler.test_mulop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;&gt;

Function 'test_mulop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:265:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_mulop_int_int&gt;
  script = '\n            void main()\n            {\n                int a = 10 * 5;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C89D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C89A60&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C89D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,83)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C89D48&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 265, in test_mulop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_multi_declarations" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1648, in test_multi_declarations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_multi_declarations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&#10;  result = &lt;TestCaseFunction test_multi_declarations&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_multi_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_multi_declarations&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_multi_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&gt;&#10;&#10;Function 'test_multi_declarations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1648:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&#10;  script = '\n            void main()\n            {\n                int value1, value2 = 1, value3 = 2;\n\n                PrintInteger(value1);\n                PrintInteger(value2);\n                PrintInt...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C961C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C960D0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C961C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',9,218)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C961C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1648, in test_multi_declarations&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1648, in test_multi_declarations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_multi_declarations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;
  result = &lt;TestCaseFunction test_multi_declarations&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_multi_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_multi_declarations&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;
  method = &lt;bound method TestNSSCompiler.test_multi_declarations of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;&gt;

Function 'test_multi_declarations' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1648:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multi_declarations&gt;
  script = '\n            void main()\n            {\n                int value1, value2 = 1, value3 = 2;\n\n                PrintInteger(value1);\n                PrintInteger(value2);\n                PrintInt...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C961C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C960D0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C961C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',9,218)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C961C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1648, in test_multi_declarations
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_multiline_comment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1769, in test_multiline_comment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_multiline_comment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&#10;  result = &lt;TestCaseFunction test_multiline_comment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_multiline_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_multiline_comment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_multiline_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&gt;&#10;&#10;Function 'test_multiline_comment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1769:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&#10;  script = '\n            void main()\n            {\n                /* int\n                abc =\n                ;; 123\n                */\n\n                string aaa = &quot;&quot;;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C9A7A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C9A0E8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C9A7A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,172)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C9A7A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1769, in test_multiline_comment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1769, in test_multiline_comment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_multiline_comment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;
  result = &lt;TestCaseFunction test_multiline_comment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_multiline_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_multiline_comment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;
  method = &lt;bound method TestNSSCompiler.test_multiline_comment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;&gt;

Function 'test_multiline_comment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1769:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiline_comment&gt;
  script = '\n            void main()\n            {\n                /* int\n                abc =\n                ;; 123\n                */\n\n                string aaa = "";\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C9A7A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07C9A0E8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C9A7A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,172)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C9A7A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1769, in test_multiline_comment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_multiplication_assignment" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 954, in test_multiplication_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_multiplication_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&#10;  result = &lt;TestCaseFunction test_multiplication_assignment&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_multiplication_assignment&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&gt;&#10;&#10;Function 'test_multiplication_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:954:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&#10;  script = '\n            void main()\n            {\n                int value = 10;\n                value *= 2 * 2;\n\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CAAA60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CAA778&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CAAA60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,153)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CAAA60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 954, in test_multiplication_assignment&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 954, in test_multiplication_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_multiplication_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;
  result = &lt;TestCaseFunction test_multiplication_assignment&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_multiplication_assignment&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;
  method = &lt;bound method TestNSSCompiler.test_multiplication_assignment of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;&gt;

Function 'test_multiplication_assignment' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:954:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_multiplication_assignment&gt;
  script = '\n            void main()\n            {\n                int value = 10;\n                value *= 2 * 2;\n\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CAAA60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CAA778&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CAAA60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,153)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CAAA60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 954, in test_multiplication_assignment
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_negop_float" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 357, in test_negop_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_negop_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&#10;  result = &lt;TestCaseFunction test_negop_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_negop_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_negop_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_negop_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&gt;&#10;&#10;Function 'test_negop_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:357:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&#10;  script = '\n            void main()\n            {\n                float a = -10.0;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CBE088&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CB6C28&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CBE088&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,84)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CBE088&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 357, in test_negop_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 357, in test_negop_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_negop_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;
  result = &lt;TestCaseFunction test_negop_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_negop_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_negop_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;
  method = &lt;bound method TestNSSCompiler.test_negop_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;&gt;

Function 'test_negop_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:357:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_float&gt;
  script = '\n            void main()\n            {\n                float a = -10.0;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CBE088&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CB6C28&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CBE088&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,84)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CBE088&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 357, in test_negop_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_negop_int" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 340, in test_negop_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_negop_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&#10;  result = &lt;TestCaseFunction test_negop_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_negop_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_negop_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_negop_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&gt;&#10;&#10;Function 'test_negop_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:340:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = -10;\n                PrintInteger(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CC53D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CC5040&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CC53D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,113)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CC53D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 340, in test_negop_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 340, in test_negop_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_negop_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;
  result = &lt;TestCaseFunction test_negop_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_negop_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_negop_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;
  method = &lt;bound method TestNSSCompiler.test_negop_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;&gt;

Function 'test_negop_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:340:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_negop_int&gt;
  script = '\n            void main()\n            {\n                int a = -10;\n                PrintInteger(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CC53D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CC5040&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CC53D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,113)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CC53D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 340, in test_negop_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_nested_include" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1927, in test_nested_include&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_nested_include&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&#10;  result = &lt;TestCaseFunction test_nested_include&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_nested_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_nested_include&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_nested_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&gt;&#10;&#10;Function 'test_nested_include' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1927:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&#10;  first_script = b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        '&#10;  second_script = b'\n            #include &quot;first_script&quot;\n        '&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&#10;  script = '\n            #include &quot;second_script&quot;\n\n            void main()\n            {\n                TestFunc(SOME_COST);\n            }\n        '&#10;  library = {'first_script': b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        ', 'second_script': b'\n      ...&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={'first_script': b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        ', 'second_script': b'...,&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CCD850&gt;,4,56), LexToken((,'(',4,60), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CCD688&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CCD850&gt;,4,56), LexToken((,'(',4,60), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,126)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={'first_script': b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        ', 'second_script': b'...,&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CCD850&gt;,4,56), LexToken((,'(',4,60), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1927, in test_nested_include&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1927, in test_nested_include
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_nested_include&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;
  result = &lt;TestCaseFunction test_nested_include&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_nested_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_nested_include&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;
  method = &lt;bound method TestNSSCompiler.test_nested_include of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;&gt;

Function 'test_nested_include' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1927:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;
  first_script = b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        '
  second_script = b'\n            #include "first_script"\n        '

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_nested_include&gt;
  script = '\n            #include "second_script"\n\n            void main()\n            {\n                TestFunc(SOME_COST);\n            }\n        '
  library = {'first_script': b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        ', 'second_script': b'\n      ...
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={'first_script': b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        ', 'second_script': b'...,
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CCD850&gt;,4,56), LexToken((,'(',4,60), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CCD688&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CCD850&gt;,4,56), LexToken((,'(',4,60), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,126)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={'first_script': b'\n            int SOME_COST = 13;\n\n            void TestFunc(int value)\n            {\n                PrintInteger(value);\n            }\n        ', 'second_script': b'...,
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CCD850&gt;,4,56), LexToken((,'(',4,60), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1927, in test_nested_include
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_not_op" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 425, in test_not_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_not_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&#10;  result = &lt;TestCaseFunction test_not_op&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_not_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_not_op&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_not_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&gt;&#10;&#10;Function 'test_not_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:425:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&#10;  script = '\n            void main()\n            {\n                int a = !1;\n                PrintInteger(a);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CD9B08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CD9820&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CD9B08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',6,112)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CD9B08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 425, in test_not_op&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 425, in test_not_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_not_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;
  result = &lt;TestCaseFunction test_not_op&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_not_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_not_op&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;
  method = &lt;bound method TestNSSCompiler.test_not_op of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;&gt;

Function 'test_not_op' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:425:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_not_op&gt;
  script = '\n            void main()\n            {\n                int a = !1;\n                PrintInteger(a);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CD9B08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CD9820&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CD9B08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',6,112)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CD9B08&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 425, in test_not_op
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_op_with_variables" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 389, in test_op_with_variables&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_op_with_variables&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&#10;  result = &lt;TestCaseFunction test_op_with_variables&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_op_with_variables of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_op_with_variables&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_op_with_variables of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&gt;&#10;&#10;Function 'test_op_with_variables' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:389:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&#10;  script = '\n            void main()\n            {\n                int a = 10;\n                int b = 5;\n                int c = a * b * a;\n                int d = 10 * 5 * 10;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CE4F10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CE4A60&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CE4F10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,178)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CE4F10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 389, in test_op_with_variables&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 389, in test_op_with_variables
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_op_with_variables&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;
  result = &lt;TestCaseFunction test_op_with_variables&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_op_with_variables of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_op_with_variables&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;
  method = &lt;bound method TestNSSCompiler.test_op_with_variables of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;&gt;

Function 'test_op_with_variables' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:389:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_op_with_variables&gt;
  script = '\n            void main()\n            {\n                int a = 10;\n                int b = 5;\n                int c = a * b * a;\n                int d = 10 * 5 * 10;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CE4F10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CE4A60&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CE4F10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,178)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CE4F10&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 389, in test_op_with_variables
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_postfix_decrement_bp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2440, in test_postfix_decrement_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_decrement_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&#10;  result = &lt;TestCaseFunction test_postfix_decrement_bp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_postfix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_decrement_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_postfix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&gt;&#10;&#10;Function 'test_postfix_decrement_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2440:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&#10;  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = a--;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C676B8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CF48B0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C676B8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,171)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C676B8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2440, in test_postfix_decrement_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2440, in test_postfix_decrement_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_decrement_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;
  result = &lt;TestCaseFunction test_postfix_decrement_bp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_postfix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_decrement_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_postfix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;&gt;

Function 'test_postfix_decrement_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2440:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_bp_int&gt;
  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = a--;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C676B8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CF48B0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C676B8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,171)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07C676B8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2440, in test_postfix_decrement_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_postfix_decrement_sp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2420, in test_postfix_decrement_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_decrement_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&#10;  result = &lt;TestCaseFunction test_postfix_decrement_sp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_postfix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_decrement_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_postfix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&gt;&#10;&#10;Function 'test_postfix_decrement_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2420:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n                int b = a--;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CFC310&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CFC1F0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CFC310&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',9,174)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CFC310&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2420, in test_postfix_decrement_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2420, in test_postfix_decrement_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_decrement_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;
  result = &lt;TestCaseFunction test_postfix_decrement_sp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_postfix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_decrement_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_postfix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;&gt;

Function 'test_postfix_decrement_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2420:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_decrement_sp_int&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n                int b = a--;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CFC310&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07CFC1F0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CFC310&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',9,174)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07CFC310&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2420, in test_postfix_decrement_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_postfix_increment_bp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2358, in test_postfix_increment_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_increment_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&#10;  result = &lt;TestCaseFunction test_postfix_increment_bp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_postfix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_increment_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_postfix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&gt;&#10;&#10;Function 'test_postfix_increment_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2358:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&#10;  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = a++;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D078C8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D072E0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D078C8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,171)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D078C8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2358, in test_postfix_increment_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2358, in test_postfix_increment_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_increment_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;
  result = &lt;TestCaseFunction test_postfix_increment_bp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_postfix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_increment_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_postfix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;&gt;

Function 'test_postfix_increment_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2358:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_bp_int&gt;
  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = a++;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D078C8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D072E0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D078C8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,171)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D078C8&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2358, in test_postfix_increment_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_postfix_increment_sp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2338, in test_postfix_increment_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_increment_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&#10;  result = &lt;TestCaseFunction test_postfix_increment_sp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_postfix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_postfix_increment_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_postfix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&gt;&#10;&#10;Function 'test_postfix_increment_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2338:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n                int b = a++;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D13DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D137F0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D13DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',9,174)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D13DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2338, in test_postfix_increment_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2338, in test_postfix_increment_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_increment_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;
  result = &lt;TestCaseFunction test_postfix_increment_sp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_postfix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_postfix_increment_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_postfix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;&gt;

Function 'test_postfix_increment_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2338:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_postfix_increment_sp_int&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n                int b = a++;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D13DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D137F0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D13DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',9,174)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D13DF0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2338, in test_postfix_increment_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prefix_decrement_bp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2399, in test_prefix_decrement_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_decrement_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&#10;  result = &lt;TestCaseFunction test_prefix_decrement_bp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prefix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_decrement_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prefix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&gt;&#10;&#10;Function 'test_prefix_decrement_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2399:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&#10;  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = --a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D213D0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D21280&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D213D0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,171)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D213D0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2399, in test_prefix_decrement_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2399, in test_prefix_decrement_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_decrement_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;
  result = &lt;TestCaseFunction test_prefix_decrement_bp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prefix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_decrement_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_prefix_decrement_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;&gt;

Function 'test_prefix_decrement_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2399:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_bp_int&gt;
  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = --a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D213D0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D21280&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D213D0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,171)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D213D0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2399, in test_prefix_decrement_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prefix_decrement_sp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2379, in test_prefix_decrement_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_decrement_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&#10;  result = &lt;TestCaseFunction test_prefix_decrement_sp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prefix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_decrement_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prefix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&gt;&#10;&#10;Function 'test_prefix_decrement_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2379:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n                int b = --a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D298F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D292F8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D298F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',9,174)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D298F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2379, in test_prefix_decrement_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2379, in test_prefix_decrement_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_decrement_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;
  result = &lt;TestCaseFunction test_prefix_decrement_sp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prefix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_decrement_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_prefix_decrement_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;&gt;

Function 'test_prefix_decrement_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2379:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_decrement_sp_int&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n                int b = --a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D298F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D292F8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D298F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',9,174)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D298F8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2379, in test_prefix_decrement_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prefix_increment_bp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2317, in test_prefix_increment_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_increment_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&#10;  result = &lt;TestCaseFunction test_prefix_increment_bp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prefix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_increment_bp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prefix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&gt;&#10;&#10;Function 'test_prefix_increment_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2317:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&#10;  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = ++a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D35EB0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D358C8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D35EB0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,171)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D35EB0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2317, in test_prefix_increment_bp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2317, in test_prefix_increment_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_increment_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;
  result = &lt;TestCaseFunction test_prefix_increment_bp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prefix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_increment_bp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_prefix_increment_bp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;&gt;

Function 'test_prefix_increment_bp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2317:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_bp_int&gt;
  script = '\n            int a = 1;\n\n            void main()\n            {\n                int b = ++a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D35EB0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D358C8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D35EB0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,171)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D35EB0&gt;,4,42), LexToken((,'(',4,46), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2317, in test_prefix_increment_bp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prefix_increment_sp_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2297, in test_prefix_increment_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_increment_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&#10;  result = &lt;TestCaseFunction test_prefix_increment_sp_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prefix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prefix_increment_sp_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prefix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&gt;&#10;&#10;Function 'test_prefix_increment_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2297:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n                int b = ++a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D40400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D40070&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D40400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',9,174)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D40400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2297, in test_prefix_increment_sp_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2297, in test_prefix_increment_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_increment_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;
  result = &lt;TestCaseFunction test_prefix_increment_sp_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prefix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prefix_increment_sp_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;
  method = &lt;bound method TestNSSCompiler.test_prefix_increment_sp_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;&gt;

Function 'test_prefix_increment_sp_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2297:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prefix_increment_sp_int&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n                int b = ++a;\n\n                PrintInteger(a);\n                PrintInteger(b);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D40400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D40070&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D40400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',9,174)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D40400&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2297, in test_prefix_increment_sp_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_after_definition" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2709, in test_prototype_after_definition&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_after_definition&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&#10;  result = &lt;TestCaseFunction test_prototype_after_definition&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_after_definition of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_after_definition&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_after_definition of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;&#10;&#10;Function 'test_prototype_after_definition' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2709:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&#10;  script = '\n            void test()\n            {\n\n            }\n\n            void test();\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;, '\n            void test()\n            {\n\n            }\n...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void test()\n            {\n\n            }\n\n            void test();\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2709, in test_prototype_after_definition&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2709, in test_prototype_after_definition
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_after_definition&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;
  result = &lt;TestCaseFunction test_prototype_after_definition&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_after_definition of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_after_definition&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_after_definition of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;

Function 'test_prototype_after_definition' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2709:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;
  script = '\n            void test()\n            {\n\n            }\n\n            void test();\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;, '\n            void test()\n            {\n\n            }\n...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void test()\n            {\n\n            }\n\n            void test();\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_after_definition&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2709, in test_prototype_after_definition
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_and_definition_default_param_mismatch" time="0.000" /><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_and_definition_param_mismatch" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2720, in test_prototype_and_definition_param_mismatch&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_and_definition_param_mismatch&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&#10;  result = &lt;TestCaseFunction test_prototype_and_definition_param_mismatch&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_and_definition_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_and_definition_param_mismatch&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_and_definition_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;&#10;&#10;Function 'test_prototype_and_definition_param_mismatch' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2720:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&#10;  script = '\n            void test(int a);\n\n            void test()\n            {\n\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;, '\n            void test(int a);\n\n           ...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void test(int a);\n\n            void test()\n            {\n\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2720, in test_prototype_and_definition_param_mismatch&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2720, in test_prototype_and_definition_param_mismatch
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_and_definition_param_mismatch&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;
  result = &lt;TestCaseFunction test_prototype_and_definition_param_mismatch&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_and_definition_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_and_definition_param_mismatch&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_and_definition_param_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;

Function 'test_prototype_and_definition_param_mismatch' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2720:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;
  script = '\n            void test(int a);\n\n            void test()\n            {\n\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;, '\n            void test(int a);\n\n           ...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void test(int a);\n\n            void test()\n            {\n\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_param_mismatch&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2720, in test_prototype_and_definition_param_mismatch
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_and_definition_return_mismatch" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2743, in test_prototype_and_definition_return_mismatch&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_and_definition_return_mismatch&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&#10;  result = &lt;TestCaseFunction test_prototype_and_definition_return_mismatch&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_and_definition_return_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_and_definition_return_mismatch&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_and_definition_return_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;&#10;&#10;Function 'test_prototype_and_definition_return_mismatch' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2743:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&#10;  script = '\n            void test(int a);\n\n            int test(int a)\n            {\n\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;, '\n            void test(int a);\n\n          ...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void test(int a);\n\n            int test(int a)\n            {\n\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2743, in test_prototype_and_definition_return_mismatch&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2743, in test_prototype_and_definition_return_mismatch
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_and_definition_return_mismatch&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;
  result = &lt;TestCaseFunction test_prototype_and_definition_return_mismatch&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_and_definition_return_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_and_definition_return_mismatch&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_and_definition_return_mismatch of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;

Function 'test_prototype_and_definition_return_mismatch' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2743:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;
  script = '\n            void test(int a);\n\n            int test(int a)\n            {\n\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;, '\n            void test(int a);\n\n          ...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void test(int a);\n\n            int test(int a)\n            {\n\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_and_definition_return_mismatch&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2743, in test_prototype_and_definition_return_mismatch
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_default_before_required" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2677, in test_prototype_default_before_required&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_default_before_required&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&#10;  result = &lt;TestCaseFunction test_prototype_default_before_required&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_default_before_required of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_default_before_required&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_default_before_required of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;&#10;&#10;Function 'test_prototype_default_before_required' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2677:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&#10;  source = '\n            void test(int value1 = 123, int value2);\n\n            void main()\n            {\n                test(123, 123);\n            }\n\n            void test(int value1 = 123, int value2)...&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;, '\n            void test(int value1 = 123, int value2...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void test(int value1 = 123, int value2);\n\n            void main()\n            {\n                test(123, 123);\n            }\n\n            void test(int value1 = 123, int value2...&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2677, in test_prototype_default_before_required&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2677, in test_prototype_default_before_required
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_default_before_required&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;
  result = &lt;TestCaseFunction test_prototype_default_before_required&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_default_before_required of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_default_before_required&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_default_before_required of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;

Function 'test_prototype_default_before_required' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2677:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;
  source = '\n            void test(int value1 = 123, int value2);\n\n            void main()\n            {\n                test(123, 123);\n            }\n\n            void test(int value1 = 123, int value2)...

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;, '\n            void test(int value1 = 123, int value2...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void test(int value1 = 123, int value2);\n\n            void main()\n            {\n                test(123, 123);\n            }\n\n            void test(int value1 = 123, int value2...
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_default_before_required&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2677, in test_prototype_default_before_required
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_missing_arg" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2643, in test_prototype_missing_arg&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_missing_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&#10;  result = &lt;TestCaseFunction test_prototype_missing_arg&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_missing_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_missing_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_missing_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;&#10;&#10;Function 'test_prototype_missing_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2643:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&#10;  source = '\n            void test(int value);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value)\n            {\n                PrintInteger(...&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;, '\n            void test(int value);\n\n            void main()\n...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void test(int value);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value)\n            {\n                PrintInteger...&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2643, in test_prototype_missing_arg&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2643, in test_prototype_missing_arg
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_missing_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;
  result = &lt;TestCaseFunction test_prototype_missing_arg&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_missing_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_missing_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_missing_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;

Function 'test_prototype_missing_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2643:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;
  source = '\n            void test(int value);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value)\n            {\n                PrintInteger(...

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;, '\n            void test(int value);\n\n            void main()\n...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void test(int value);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value)\n            {\n                PrintInteger...
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2643, in test_prototype_missing_arg
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_missing_arg_and_default" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2660, in test_prototype_missing_arg_and_default&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_missing_arg_and_default&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&#10;  result = &lt;TestCaseFunction test_prototype_missing_arg_and_default&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_missing_arg_and_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_missing_arg_and_default&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_missing_arg_and_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;&#10;&#10;Function 'test_prototype_missing_arg_and_default' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2660:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&#10;  source = '\n            void test(int value1, int value2 = 123);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value1, int value2 = 123)\n      ...&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;, '\n            void test(int value1, int value2 = 123...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void test(int value1, int value2 = 123);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value1, int value2 = 123)\n     ...&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2660, in test_prototype_missing_arg_and_default&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2660, in test_prototype_missing_arg_and_default
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_missing_arg_and_default&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;
  result = &lt;TestCaseFunction test_prototype_missing_arg_and_default&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_missing_arg_and_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_missing_arg_and_default&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_missing_arg_and_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;

Function 'test_prototype_missing_arg_and_default' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2660:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;
  source = '\n            void test(int value1, int value2 = 123);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value1, int value2 = 123)\n      ...

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;, '\n            void test(int value1, int value2 = 123...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void test(int value1, int value2 = 123);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value1, int value2 = 123)\n     ...
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_missing_arg_and_default&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2660, in test_prototype_missing_arg_and_default
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_no_args" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2483, in test_prototype_no_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_no_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&#10;  result = &lt;TestCaseFunction test_prototype_no_args&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_no_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&gt;&#10;&#10;Function 'test_prototype_no_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2483:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&#10;  script = '\n            void test();\n\n            void main()\n            {\n                test();\n            }\n\n            void test()\n            {\n                PrintInteger(56);\n            ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,116)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D57538&gt;,4,44), LexToken((,'(',4,48), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D573E8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D57538&gt;,4,44), LexToken((,'(',4,48), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,101)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D57538&gt;,4,44), LexToken((,'(',4,48), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2483, in test_prototype_no_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2483, in test_prototype_no_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_no_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;
  result = &lt;TestCaseFunction test_prototype_no_args&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_no_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_no_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;&gt;

Function 'test_prototype_no_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2483:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_no_args&gt;
  script = '\n            void test();\n\n            void main()\n            {\n                test();\n            }\n\n            void test()\n            {\n                PrintInteger(56);\n            ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,116)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D57538&gt;,4,44), LexToken((,'(',4,48), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D573E8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D57538&gt;,4,44), LexToken((,'(',4,48), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,101)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D57538&gt;,4,44), LexToken((,'(',4,48), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2483, in test_prototype_no_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_with_arg" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2506, in test_prototype_with_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&#10;  result = &lt;TestCaseFunction test_prototype_with_arg&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_with_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&gt;&#10;&#10;Function 'test_prototype_with_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2506:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&#10;  script = '\n            void test(int value);\n\n            void main()\n            {\n                test(57);\n            }\n\n            void test(int value)\n            {\n                PrintIntege...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,127)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D93910&gt;,4,53), LexToken((,'(',4,57), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D846E8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D93910&gt;,4,53), LexToken((,'(',4,57), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,112)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D93910&gt;,4,53), LexToken((,'(',4,57), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2506, in test_prototype_with_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2506, in test_prototype_with_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;
  result = &lt;TestCaseFunction test_prototype_with_arg&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_with_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;&gt;

Function 'test_prototype_with_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2506:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_arg&gt;
  script = '\n            void test(int value);\n\n            void main()\n            {\n                test(57);\n            }\n\n            void test(int value)\n            {\n                PrintIntege...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,127)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D93910&gt;,4,53), LexToken((,'(',4,57), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D846E8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D93910&gt;,4,53), LexToken((,'(',4,57), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,112)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D93910&gt;,4,53), LexToken((,'(',4,57), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2506, in test_prototype_with_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_with_default_arg" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2583, in test_prototype_with_default_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_default_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&#10;  result = &lt;TestCaseFunction test_prototype_with_default_arg&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_default_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_default_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_with_default_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&gt;&#10;&#10;Function 'test_prototype_with_default_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2583:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&#10;  script = '\n            void test(int value = 57);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value = 57)\n            {\n                Pri...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,130)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D9EBF8&gt;,4,58), LexToken((,'(',4,62), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D93A90&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D9EBF8&gt;,4,58), LexToken((,'(',4,62), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,115)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D9EBF8&gt;,4,58), LexToken((,'(',4,62), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2583, in test_prototype_with_default_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2583, in test_prototype_with_default_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_default_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;
  result = &lt;TestCaseFunction test_prototype_with_default_arg&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_default_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_default_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_with_default_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;&gt;

Function 'test_prototype_with_default_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2583:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_arg&gt;
  script = '\n            void test(int value = 57);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value = 57)\n            {\n                Pri...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,130)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D9EBF8&gt;,4,58), LexToken((,'(',4,62), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D93A90&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D9EBF8&gt;,4,58), LexToken((,'(',4,62), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,115)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D9EBF8&gt;,4,58), LexToken((,'(',4,62), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2583, in test_prototype_with_default_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_with_default_constant_arg" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2606, in test_prototype_with_default_constant_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_default_constant_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&#10;  result = &lt;TestCaseFunction test_prototype_with_default_constant_arg&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_default_constant_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_default_constant_arg&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_with_default_constant_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&gt;&#10;&#10;Function 'test_prototype_with_default_constant_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2606:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&#10;  script = '\n            void test(int value = DAMAGE_TYPE_COLD);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value = DAMAGE_TYPE_COLD)\n      ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,144)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DA6190&gt;,4,72), LexToken((,'(',4,76), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DA60D0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DA6190&gt;,4,72), LexToken((,'(',4,76), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,129)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DA6190&gt;,4,72), LexToken((,'(',4,76), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2606, in test_prototype_with_default_constant_arg&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2606, in test_prototype_with_default_constant_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_default_constant_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;
  result = &lt;TestCaseFunction test_prototype_with_default_constant_arg&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_default_constant_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_default_constant_arg&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_with_default_constant_arg of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;&gt;

Function 'test_prototype_with_default_constant_arg' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2606:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_default_constant_arg&gt;
  script = '\n            void test(int value = DAMAGE_TYPE_COLD);\n\n            void main()\n            {\n                test();\n            }\n\n            void test(int value = DAMAGE_TYPE_COLD)\n      ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,144)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DA6190&gt;,4,72), LexToken((,'(',4,76), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DA60D0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DA6190&gt;,4,72), LexToken((,'(',4,76), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,129)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DA6190&gt;,4,72), LexToken((,'(',4,76), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2606, in test_prototype_with_default_constant_arg
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_with_many_args" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2554, in test_prototype_with_many_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_many_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&#10;  result = &lt;TestCaseFunction test_prototype_with_many_args&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_many_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_many_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_with_many_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&gt;&#10;&#10;Function 'test_prototype_with_many_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2554:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&#10;  script = '\n            void test(int a, effect z, int b, int c, int d = 4)\n            {\n                PrintInteger(a);\n                PrintInteger(b);\n                PrintInteger(c);\n               ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,10,238)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DAB538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DAB238&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DAB538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,223)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DAB538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2554, in test_prototype_with_many_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2554, in test_prototype_with_many_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_many_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;
  result = &lt;TestCaseFunction test_prototype_with_many_args&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_many_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_many_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_with_many_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;&gt;

Function 'test_prototype_with_many_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2554:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_many_args&gt;
  script = '\n            void test(int a, effect z, int b, int c, int d = 4)\n            {\n                PrintInteger(a);\n                PrintInteger(b);\n                PrintInteger(c);\n               ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,10,238)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DAB538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DAB238&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DAB538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,223)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DAB538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2554, in test_prototype_with_many_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_prototype_with_three_args" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2529, in test_prototype_with_three_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_three_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&#10;  result = &lt;TestCaseFunction test_prototype_with_three_args&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_three_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_prototype_with_three_args&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_prototype_with_three_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&gt;&#10;&#10;Function 'test_prototype_with_three_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2529:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&#10;  script = '\n            void test(int a, int b, int c)\n            {\n                PrintInteger(a);\n                PrintInteger(b);\n                PrintInteger(c);\n            }\n\n            void ma...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,184)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DB6D00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DB6610&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DB6D00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,169)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DB6D00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2529, in test_prototype_with_three_args&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2529, in test_prototype_with_three_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_three_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;
  result = &lt;TestCaseFunction test_prototype_with_three_args&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_prototype_with_three_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_prototype_with_three_args&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;
  method = &lt;bound method TestNSSCompiler.test_prototype_with_three_args of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;&gt;

Function 'test_prototype_with_three_args' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2529:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_prototype_with_three_args&gt;
  script = '\n            void test(int a, int b, int c)\n            {\n                PrintInteger(a);\n                PrintInteger(b);\n                PrintInteger(c);\n            }\n\n            void ma...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,9,184)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DB6D00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DB6610&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DB6D00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,169)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DB6D00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2529, in test_prototype_with_three_args
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_redefine_function" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2691, in test_redefine_function&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_redefine_function&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&#10;  result = &lt;TestCaseFunction test_redefine_function&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_redefine_function of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_redefine_function&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_redefine_function of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;&#10;&#10;Function 'test_redefine_function' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2691:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&#10;  script = '\n            void test()\n            {\n\n            }\n\n            void test()\n            {\n\n            }\n        '&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;, '\n            void test()\n            {\n\n            }\n\n       ...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            void test()\n            {\n\n            }\n\n            void test()\n            {\n\n            }\n        ']&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2691, in test_redefine_function&#10;    self.assertRaises(CompileError, self.compile, script)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2691, in test_redefine_function
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_redefine_function&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;
  result = &lt;TestCaseFunction test_redefine_function&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_redefine_function of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_redefine_function&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;
  method = &lt;bound method TestNSSCompiler.test_redefine_function of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;

Function 'test_redefine_function' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2691:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;
  script = '\n            void test()\n            {\n\n            }\n\n            void test()\n            {\n\n            }\n        '

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;, '\n            void test()\n            {\n\n            }\n\n       ...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            void test()\n            {\n\n            }\n\n            void test()\n            {\n\n            }\n        ']
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_redefine_function&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2691, in test_redefine_function
    self.assertRaises(CompileError, self.compile, script)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_return" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1787, in test_return&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_return&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&#10;  result = &lt;TestCaseFunction test_return&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_return of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_return&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_return of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&gt;&#10;&#10;Function 'test_return' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1787:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n\n                if (a == 1)\n                {\n                    PrintInteger(a);\n                    return;\n            ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DD0328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DD01F0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DD0328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',14,266)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DD0328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1787, in test_return&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1787, in test_return
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_return&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;
  result = &lt;TestCaseFunction test_return&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_return of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_return&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;
  method = &lt;bound method TestNSSCompiler.test_return of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;&gt;

Function 'test_return' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1787:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n\n                if (a == 1)\n                {\n                    PrintInteger(a);\n                    return;\n            ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DD0328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DD01F0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DD0328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',14,266)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DD0328&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1787, in test_return
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_return_parenthesis" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1812, in test_return_parenthesis&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_return_parenthesis&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&#10;  result = &lt;TestCaseFunction test_return_parenthesis&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_return_parenthesis of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_return_parenthesis&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_return_parenthesis of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&gt;&#10;&#10;Function 'test_return_parenthesis' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1812:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&#10;  script = '\n            int test()\n            {\n                return(321);\n            }\n\n            void main()\n            {\n                int value = test();\n                PrintInteger(value...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,94)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DDD9D0&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DDD4F0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DDD9D0&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,79)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DDD9D0&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1812, in test_return_parenthesis&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1812, in test_return_parenthesis
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_return_parenthesis&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;
  result = &lt;TestCaseFunction test_return_parenthesis&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_return_parenthesis of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_return_parenthesis&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;
  method = &lt;bound method TestNSSCompiler.test_return_parenthesis of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;&gt;

Function 'test_return_parenthesis' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1812:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis&gt;
  script = '\n            int test()\n            {\n                return(321);\n            }\n\n            void main()\n            {\n                int value = test();\n                PrintInteger(value...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,94)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DDD9D0&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DDD4F0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DDD9D0&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,79)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DDD9D0&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1812, in test_return_parenthesis
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_return_parenthesis_constant" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1833, in test_return_parenthesis_constant&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_return_parenthesis_constant&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&#10;  result = &lt;TestCaseFunction test_return_parenthesis_constant&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_return_parenthesis_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_return_parenthesis_constant&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_return_parenthesis_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&gt;&#10;&#10;Function 'test_return_parenthesis_constant' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1833:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&#10;  script = '\n            int test()\n            {\n                return(TRUE);\n            }\n\n            void main()\n            {\n                int value = test();\n                PrintInteger(valu...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,95)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DE6BF8&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DE68F8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DE6BF8&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,80)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DE6BF8&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1833, in test_return_parenthesis_constant&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1833, in test_return_parenthesis_constant
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_return_parenthesis_constant&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;
  result = &lt;TestCaseFunction test_return_parenthesis_constant&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_return_parenthesis_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_return_parenthesis_constant&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;
  method = &lt;bound method TestNSSCompiler.test_return_parenthesis_constant of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;&gt;

Function 'test_return_parenthesis_constant' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1833:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_return_parenthesis_constant&gt;
  script = '\n            int test()\n            {\n                return(TRUE);\n            }\n\n            void main()\n            {\n                int value = test();\n                PrintInteger(valu...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,95)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DE6BF8&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DE68F8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DE6BF8&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,80)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DE6BF8&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1833, in test_return_parenthesis_constant
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_scope" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1138, in test_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&#10;  result = &lt;TestCaseFunction test_scope&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&gt;&#10;&#10;Function 'test_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1138:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&#10;  script = '\n            void main()\n            {\n                int value = 1;\n\n                if (value == 1)\n                {\n                    value = 2;\n                }\n            }\n     ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DF1E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DF1B20&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DF1E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,182)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DF1E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1138, in test_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1138, in test_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;
  result = &lt;TestCaseFunction test_scope&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;
  method = &lt;bound method TestNSSCompiler.test_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;&gt;

Function 'test_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1138:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scope&gt;
  script = '\n            void main()\n            {\n                int value = 1;\n\n                if (value == 1)\n                {\n                    value = 2;\n                }\n            }\n     ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DF1E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DF1B20&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DF1E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,182)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DF1E20&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1138, in test_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_scoped_block" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1156, in test_scoped_block&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_scoped_block&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&#10;  result = &lt;TestCaseFunction test_scoped_block&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_scoped_block of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_scoped_block&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_scoped_block of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&gt;&#10;&#10;Function 'test_scoped_block' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1156:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&#10;  script = '\n            void main()\n            {\n                int a = 1;\n\n                {\n                    int b = 2;\n                    PrintInteger(a);\n                    PrintInteger(b);\n...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DC81C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DD0160&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DC81C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,220)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DC81C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1156, in test_scoped_block&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1156, in test_scoped_block
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_scoped_block&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;
  result = &lt;TestCaseFunction test_scoped_block&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_scoped_block of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_scoped_block&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;
  method = &lt;bound method TestNSSCompiler.test_scoped_block of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;&gt;

Function 'test_scoped_block' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1156:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_scoped_block&gt;
  script = '\n            void main()\n            {\n                int a = 1;\n\n                {\n                    int b = 2;\n                    PrintInteger(a);\n                    PrintInteger(b);\n...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DC81C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07DD0160&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DC81C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,220)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07DC81C0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1156, in test_scoped_block
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_single_statement_else_if_else" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1316, in test_single_statement_else_if_else&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_single_statement_else_if_else&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&#10;  result = &lt;TestCaseFunction test_single_statement_else_if_else&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_single_statement_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_single_statement_else_if_else&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_single_statement_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&gt;&#10;&#10;Function 'test_single_statement_else_if_else' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1316:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&#10;  script = '\n            void main()\n            {\n                if (0) PrintInteger(11);\n                else if (0) PrintInteger(22);\n                else PrintInteger(33);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67148&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D671D8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67148&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,177)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67148&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1316, in test_single_statement_else_if_else&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1316, in test_single_statement_else_if_else
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_single_statement_else_if_else&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;
  result = &lt;TestCaseFunction test_single_statement_else_if_else&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_single_statement_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_single_statement_else_if_else&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;
  method = &lt;bound method TestNSSCompiler.test_single_statement_else_if_else of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;&gt;

Function 'test_single_statement_else_if_else' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1316:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_else_if_else&gt;
  script = '\n            void main()\n            {\n                if (0) PrintInteger(11);\n                else if (0) PrintInteger(22);\n                else PrintInteger(33);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67148&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D671D8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67148&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,177)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67148&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1316, in test_single_statement_else_if_else
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_single_statement_if" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1301, in test_single_statement_if&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_single_statement_if&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&#10;  result = &lt;TestCaseFunction test_single_statement_if&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_single_statement_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_single_statement_if&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_single_statement_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&gt;&#10;&#10;Function 'test_single_statement_if' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1301:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&#10;  script = '\n            void main()\n            {\n                if (1) PrintInteger(222);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E0B178&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E0B0E8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E0B178&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,93)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E0B178&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1301, in test_single_statement_if&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1301, in test_single_statement_if
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_single_statement_if&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;
  result = &lt;TestCaseFunction test_single_statement_if&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_single_statement_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_single_statement_if&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;
  method = &lt;bound method TestNSSCompiler.test_single_statement_if of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;&gt;

Function 'test_single_statement_if' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1301:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_single_statement_if&gt;
  script = '\n            void main()\n            {\n                if (1) PrintInteger(222);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E0B178&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E0B0E8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E0B178&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,93)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E0B178&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1301, in test_single_statement_if
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_struct_get_invalid_member" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2264, in test_struct_get_invalid_member&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_struct_get_invalid_member&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&#10;  result = &lt;TestCaseFunction test_struct_get_invalid_member&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_struct_get_invalid_member of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_struct_get_invalid_member&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_struct_get_invalid_member of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;&#10;&#10;Function 'test_struct_get_invalid_member' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2264:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&#10;  source = '\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n        ...&#10;&#10;Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&#10;  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;&#10;  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;, '\n            struct ABC\n            {\n                int...&#10;  kwargs = {}&#10;  context = None&#10;&#10;Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:&#10;  self = None&#10;  name = 'assertRaises'&#10;  args = ['\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n       ...&#10;  kwargs = {}&#10;  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2264, in test_struct_get_invalid_member&#10;    self.assertRaises(CompileError, self.compile, source)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 739, in assertRaises&#10;    return context.handle('assertRaises', args, kwargs)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 201, in handle&#10;    callable_obj(*args, **kwargs)&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2264, in test_struct_get_invalid_member
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_struct_get_invalid_member&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;
  result = &lt;TestCaseFunction test_struct_get_invalid_member&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_struct_get_invalid_member of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_struct_get_invalid_member&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;
  method = &lt;bound method TestNSSCompiler.test_struct_get_invalid_member of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;

Function 'test_struct_get_invalid_member' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2264:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;
  source = '\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n        ...

Function 'assertRaises' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:739:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;
  expected_exception = &lt;class 'pykotor.resource.formats.ncs.compiler.classes.CompileError'&gt;
  args = (&lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;, '\n            struct ABC\n            {\n                int...
  kwargs = {}
  context = None

Function 'handle' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:201:
  self = None
  name = 'assertRaises'
  args = ['\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n       ...
  kwargs = {}
  callable_obj = &lt;bound method TestNSSCompiler.compile of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_invalid_member&gt;&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2264, in test_struct_get_invalid_member
    self.assertRaises(CompileError, self.compile, source)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 739, in assertRaises
    return context.handle('assertRaises', args, kwargs)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 201, in handle
    callable_obj(*args, **kwargs)
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_struct_get_members" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2222, in test_struct_get_members&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_struct_get_members&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&#10;  result = &lt;TestCaseFunction test_struct_get_members&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_struct_get_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_struct_get_members&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_struct_get_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&gt;&#10;&#10;Function 'test_struct_get_members' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2222:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&#10;  script = '\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n        ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E29580&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E1F610&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E29580&gt;,9,160), LexToken((,'(',9,164), function_definition_params, LexToken...&#10;  t1 = LexToken(},'}',15,348)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E29580&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2222, in test_struct_get_members&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2222, in test_struct_get_members
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_struct_get_members&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;
  result = &lt;TestCaseFunction test_struct_get_members&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_struct_get_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_struct_get_members&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;
  method = &lt;bound method TestNSSCompiler.test_struct_get_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;&gt;

Function 'test_struct_get_members' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2222:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_get_members&gt;
  script = '\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n        ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E29580&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E1F610&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E29580&gt;,9,160), LexToken((,'(',9,164), function_definition_params, LexToken...
  t1 = LexToken(},'}',15,348)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E29580&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2222, in test_struct_get_members
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_struct_set_members" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2267, in test_struct_set_members&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_struct_set_members&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&#10;  result = &lt;TestCaseFunction test_struct_set_members&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_struct_set_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_struct_set_members&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_struct_set_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&gt;&#10;&#10;Function 'test_struct_set_members' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2267:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&#10;  script = '\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n        ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E34040&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E29850&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E34040&gt;,9,160), LexToken((,'(',9,164), function_definition_params, LexToken...&#10;  t1 = LexToken(},'}',18,453)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E34040&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2267, in test_struct_set_members&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2267, in test_struct_set_members
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_struct_set_members&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;
  result = &lt;TestCaseFunction test_struct_set_members&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_struct_set_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_struct_set_members&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;
  method = &lt;bound method TestNSSCompiler.test_struct_set_members of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;&gt;

Function 'test_struct_set_members' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2267:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_struct_set_members&gt;
  script = '\n            struct ABC\n            {\n                int value1;\n                string value2;\n                float value3;\n            };\n\n            void main()\n            {\n        ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E34040&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E29850&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E34040&gt;,9,160), LexToken((,'(',9,164), function_definition_params, LexToken...
  t1 = LexToken(},'}',18,453)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E34040&gt;,9,160), LexToken((,'(',9,164), function_definition_params, Le...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2267, in test_struct_set_members
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_subop_float_float" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 250, in test_subop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&#10;  result = &lt;TestCaseFunction test_subop_float_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_subop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subop_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_subop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&gt;&#10;&#10;Function 'test_subop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:250:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&#10;  script = '\n            void main()\n            {\n                float value = 10.0 - 5.0;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E39A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E390D0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E39A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,93)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E39A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 250, in test_subop_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 250, in test_subop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;
  result = &lt;TestCaseFunction test_subop_float_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_subop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subop_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;
  method = &lt;bound method TestNSSCompiler.test_subop_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;&gt;

Function 'test_subop_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:250:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_float_float&gt;
  script = '\n            void main()\n            {\n                float value = 10.0 - 5.0;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E39A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E390D0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E39A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,93)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E39A60&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 250, in test_subop_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_subop_int_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 235, in test_subop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&#10;  result = &lt;TestCaseFunction test_subop_int_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_subop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subop_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_subop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&gt;&#10;&#10;Function 'test_subop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:235:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&#10;  script = '\n            void main()\n            {\n                int value = 10 - 5;\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E43E80&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E43A18&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E43E80&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,87)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E43E80&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 235, in test_subop_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 235, in test_subop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;
  result = &lt;TestCaseFunction test_subop_int_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_subop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subop_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;
  method = &lt;bound method TestNSSCompiler.test_subop_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;&gt;

Function 'test_subop_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:235:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subop_int_int&gt;
  script = '\n            void main()\n            {\n                int value = 10 - 5;\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E43E80&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E43A18&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E43E80&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,87)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E43E80&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 235, in test_subop_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_subtraction_assignment_float_float" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 916, in test_subtraction_assignment_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&#10;  result = &lt;TestCaseFunction test_subtraction_assignment_float_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_float_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&gt;&#10;&#10;Function 'test_subtraction_assignment_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:916:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&#10;  script = '\n            void main()\n            {\n                float value = 10.0;\n                value -= 2.0;\n\n                PrintFloat(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E512C8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E511A8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E512C8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,153)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E512C8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 916, in test_subtraction_assignment_float_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 916, in test_subtraction_assignment_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;
  result = &lt;TestCaseFunction test_subtraction_assignment_float_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_float_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;
  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;&gt;

Function 'test_subtraction_assignment_float_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:916:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_float&gt;
  script = '\n            void main()\n            {\n                float value = 10.0;\n                value -= 2.0;\n\n                PrintFloat(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E512C8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E511A8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E512C8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,153)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E512C8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 916, in test_subtraction_assignment_float_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_subtraction_assignment_float_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 936, in test_subtraction_assignment_float_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_float_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&#10;  result = &lt;TestCaseFunction test_subtraction_assignment_float_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_float_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&gt;&#10;&#10;Function 'test_subtraction_assignment_float_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:936:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&#10;  script = '\n            void main()\n            {\n                float value = 10.0;\n                value -= 2;\n\n                PrintFloat(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E5B730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E5B148&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E5B730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,151)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E5B730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 936, in test_subtraction_assignment_float_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 936, in test_subtraction_assignment_float_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_float_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;
  result = &lt;TestCaseFunction test_subtraction_assignment_float_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_float_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;
  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_float_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;&gt;

Function 'test_subtraction_assignment_float_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:936:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_float_int&gt;
  script = '\n            void main()\n            {\n                float value = 10.0;\n                value -= 2;\n\n                PrintFloat(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E5B730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E5B148&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E5B730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,151)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E5B730&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 936, in test_subtraction_assignment_float_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_subtraction_assignment_int_float" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 896, in test_subtraction_assignment_int_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_int_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&#10;  result = &lt;TestCaseFunction test_subtraction_assignment_int_float&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_int_float&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&gt;&#10;&#10;Function 'test_subtraction_assignment_int_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:896:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&#10;  script = '\n            void main()\n            {\n                int value = 10;\n                value -= 2.0;\n\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E66B98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E665B0&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E66B98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,151)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E66B98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 896, in test_subtraction_assignment_int_float&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 896, in test_subtraction_assignment_int_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_int_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;
  result = &lt;TestCaseFunction test_subtraction_assignment_int_float&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_int_float&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;
  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_float of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;&gt;

Function 'test_subtraction_assignment_int_float' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:896:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_float&gt;
  script = '\n            void main()\n            {\n                int value = 10;\n                value -= 2.0;\n\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E66B98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E665B0&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E66B98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,151)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E66B98&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 896, in test_subtraction_assignment_int_float
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_subtraction_assignment_int_int" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 876, in test_subtraction_assignment_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&#10;  result = &lt;TestCaseFunction test_subtraction_assignment_int_int&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_subtraction_assignment_int_int&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&gt;&#10;&#10;Function 'test_subtraction_assignment_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:876:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&#10;  script = '\n            void main()\n            {\n                int value = 10;\n                value -= 2 * 2;\n\n                PrintInteger(value);\n            }\n        '&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E7B0A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E73A18&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E7B0A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,153)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E7B0A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 876, in test_subtraction_assignment_int_int&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 876, in test_subtraction_assignment_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;
  result = &lt;TestCaseFunction test_subtraction_assignment_int_int&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_subtraction_assignment_int_int&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;
  method = &lt;bound method TestNSSCompiler.test_subtraction_assignment_int_int of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;&gt;

Function 'test_subtraction_assignment_int_int' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:876:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_subtraction_assignment_int_int&gt;
  script = '\n            void main()\n            {\n                int value = 10;\n                value -= 2 * 2;\n\n                PrintInteger(value);\n            }\n        '
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E7B0A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E73A18&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E7B0A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,153)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E7B0A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 876, in test_subtraction_assignment_int_int
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_switch_jump_over" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1022, in test_switch_jump_over&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_jump_over&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&#10;  result = &lt;TestCaseFunction test_switch_jump_over&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_switch_jump_over of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_jump_over&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_switch_jump_over of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&gt;&#10;&#10;Function 'test_switch_jump_over' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1022:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&#10;  script = '\n            void main()\n            {\n                switch (4)\n                {\n                    case 1:\n                        PrintInteger(1);\n                    case 2:\n          ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E1F4A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E7F358&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E1F4A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',13,321)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E1F4A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1022, in test_switch_jump_over&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1022, in test_switch_jump_over
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_jump_over&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;
  result = &lt;TestCaseFunction test_switch_jump_over&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_switch_jump_over of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_jump_over&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;
  method = &lt;bound method TestNSSCompiler.test_switch_jump_over of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;&gt;

Function 'test_switch_jump_over' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1022:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_jump_over&gt;
  script = '\n            void main()\n            {\n                switch (4)\n                {\n                    case 1:\n                        PrintInteger(1);\n                    case 2:\n          ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E1F4A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E7F358&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E1F4A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',13,321)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E1F4A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1022, in test_switch_jump_over
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_switch_no_breaks" time="0.047"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 997, in test_switch_no_breaks&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_no_breaks&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&#10;  result = &lt;TestCaseFunction test_switch_no_breaks&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_switch_no_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_no_breaks&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_switch_no_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&gt;&#10;&#10;Function 'test_switch_no_breaks' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:997:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&#10;  script = '\n            void main()\n            {\n                switch (2)\n                {\n                    case 1:\n                        PrintInteger(1);\n                    case 2:\n          ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67CD0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E7FAA8&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67CD0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',13,321)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67CD0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 997, in test_switch_no_breaks&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 997, in test_switch_no_breaks
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_no_breaks&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;
  result = &lt;TestCaseFunction test_switch_no_breaks&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_switch_no_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_no_breaks&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;
  method = &lt;bound method TestNSSCompiler.test_switch_no_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;&gt;

Function 'test_switch_no_breaks' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:997:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_no_breaks&gt;
  script = '\n            void main()\n            {\n                switch (2)\n                {\n                    case 1:\n                        PrintInteger(1);\n                    case 2:\n          ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67CD0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E7FAA8&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67CD0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',13,321)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07D67CD0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 997, in test_switch_no_breaks
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_switch_scope_a" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2884, in test_switch_scope_a&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_scope_a&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&#10;  result = &lt;TestCaseFunction test_switch_scope_a&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_switch_scope_a of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_scope_a&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_switch_scope_a of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&gt;&#10;&#10;Function 'test_switch_scope_a' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2884:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&#10;  script = '\n            int shape;\n            int harmful;\n\n            void main()\n            {\n                object oTarget = OBJECT_SELF;\n                effect e1, e2;\n                effect e3;...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AC38F8&gt;,5,67), LexToken((,'(',5,71), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D7B370&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AC38F8&gt;,5,67), LexToken((,'(',5,71), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',28,783)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AC38F8&gt;,5,67), LexToken((,'(',5,71), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2884, in test_switch_scope_a&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2884, in test_switch_scope_a
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_scope_a&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;
  result = &lt;TestCaseFunction test_switch_scope_a&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_switch_scope_a of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_scope_a&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;
  method = &lt;bound method TestNSSCompiler.test_switch_scope_a of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;&gt;

Function 'test_switch_scope_a' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2884:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_a&gt;
  script = '\n            int shape;\n            int harmful;\n\n            void main()\n            {\n                object oTarget = OBJECT_SELF;\n                effect e1, e2;\n                effect e3;...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AC38F8&gt;,5,67), LexToken((,'(',5,71), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07D7B370&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AC38F8&gt;,5,67), LexToken((,'(',5,71), function_definition_params, LexToken()...
  t1 = LexToken(},'}',28,783)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07AC38F8&gt;,5,67), LexToken((,'(',5,71), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2884, in test_switch_scope_a
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_switch_scope_b" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2922, in test_switch_scope_b&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_scope_b&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&#10;  result = &lt;TestCaseFunction test_switch_scope_b&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_switch_scope_b of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_scope_b&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_switch_scope_b of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&gt;&#10;&#10;Function 'test_switch_scope_b' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2922:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&#10;  script = '\n            int test(int abc)\n            {\n             GiveXPToCreature(GetFirstPC(), abc);\n            }\n\n            void main()\n            {\n                test(123);\n            }\n...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,122)&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0436D208&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0436DD48&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = 'VOID_TYPE'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0436D208&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',5,107)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0436D208&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2922, in test_switch_scope_b&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2922, in test_switch_scope_b
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_scope_b&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;
  result = &lt;TestCaseFunction test_switch_scope_b&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_switch_scope_b of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_scope_b&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;
  method = &lt;bound method TestNSSCompiler.test_switch_scope_b of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;&gt;

Function 'test_switch_scope_b' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2922:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scope_b&gt;
  script = '\n            int test(int abc)\n            {\n             GiveXPToCreature(GetFirstPC(), abc);\n            }\n\n            void main()\n            {\n                test(123);\n            }\n...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = LexToken(VOID_TYPE,&lt;DataType.VOID: 'void'&gt;,7,122)
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0436D208&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x0436DD48&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = 'VOID_TYPE'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0436D208&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexToken()...
  t1 = LexToken(},'}',5,107)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x0436D208&gt;,2,17), LexToken((,'(',2,21), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2922, in test_switch_scope_b
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_switch_scoped_blocks" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1105, in test_switch_scoped_blocks&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_scoped_blocks&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&#10;  result = &lt;TestCaseFunction test_switch_scoped_blocks&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_switch_scoped_blocks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_scoped_blocks&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_switch_scoped_blocks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&gt;&#10;&#10;Function 'test_switch_scoped_blocks' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1105:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&#10;  script = '\n            void main()\n            {\n                switch (2)\n                {\n                    case 1:\n                    {\n                        int inner = 10;\n                 ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E8EDD8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E8EA30&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E8EDD8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',20,483)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E8EDD8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1105, in test_switch_scoped_blocks&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1105, in test_switch_scoped_blocks
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_scoped_blocks&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;
  result = &lt;TestCaseFunction test_switch_scoped_blocks&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_switch_scoped_blocks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_scoped_blocks&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;
  method = &lt;bound method TestNSSCompiler.test_switch_scoped_blocks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;&gt;

Function 'test_switch_scoped_blocks' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1105:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_scoped_blocks&gt;
  script = '\n            void main()\n            {\n                switch (2)\n                {\n                    case 1:\n                    {\n                        int inner = 10;\n                 ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E8EDD8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E8EA30&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E8EDD8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',20,483)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E8EDD8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1105, in test_switch_scoped_blocks
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_switch_with_breaks" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1045, in test_switch_with_breaks&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_with_breaks&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&#10;  result = &lt;TestCaseFunction test_switch_with_breaks&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_switch_with_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_with_breaks&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_switch_with_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&gt;&#10;&#10;Function 'test_switch_with_breaks' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1045:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&#10;  script = '\n            void main()\n            {\n                switch (3)\n                {\n                    case 1:\n                        PrintInteger(1);\n                        break;\n       ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07840598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07840100&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07840598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',19,514)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07840598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1045, in test_switch_with_breaks&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1045, in test_switch_with_breaks
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_with_breaks&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;
  result = &lt;TestCaseFunction test_switch_with_breaks&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_switch_with_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_with_breaks&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;
  method = &lt;bound method TestNSSCompiler.test_switch_with_breaks of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;&gt;

Function 'test_switch_with_breaks' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1045:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_breaks&gt;
  script = '\n            void main()\n            {\n                switch (3)\n                {\n                    case 1:\n                        PrintInteger(1);\n                        break;\n       ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07840598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07840100&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07840598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',19,514)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07840598&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1045, in test_switch_with_breaks
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_switch_with_default" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1075, in test_switch_with_default&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_with_default&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&#10;  result = &lt;TestCaseFunction test_switch_with_default&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_switch_with_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_switch_with_default&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_switch_with_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&gt;&#10;&#10;Function 'test_switch_with_default' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1075:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&#10;  script = '\n            void main()\n            {\n                switch (4)\n                {\n                    case 1:\n                        PrintInteger(1);\n                        break;\n       ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E97D30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E97430&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E97D30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',19,515)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E97D30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1075, in test_switch_with_default&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1075, in test_switch_with_default
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_with_default&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;
  result = &lt;TestCaseFunction test_switch_with_default&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_switch_with_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_switch_with_default&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;
  method = &lt;bound method TestNSSCompiler.test_switch_with_default of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;&gt;

Function 'test_switch_with_default' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1075:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_switch_with_default&gt;
  script = '\n            void main()\n            {\n                switch (4)\n                {\n                    case 1:\n                        PrintInteger(1);\n                        break;\n       ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E97D30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07E97430&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E97D30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',19,515)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07E97D30&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1075, in test_switch_with_default
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_vector" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2138, in test_vector&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&#10;  result = &lt;TestCaseFunction test_vector&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_vector of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_vector of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&gt;&#10;&#10;Function 'test_vector' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2138:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&#10;  script = '\n            void main()\n            {\n                vector vec = Vector(2.0, 4.0, 4.0);\n                float mag = VectorMagnitude(vec);\n                PrintFloat(mag);\n            }\n    ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EA64A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EA6100&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EA64A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',7,186)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EA64A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2138, in test_vector&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2138, in test_vector
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;
  result = &lt;TestCaseFunction test_vector&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_vector of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;
  method = &lt;bound method TestNSSCompiler.test_vector of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;&gt;

Function 'test_vector' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2138:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector&gt;
  script = '\n            void main()\n            {\n                vector vec = Vector(2.0, 4.0, 4.0);\n                float mag = VectorMagnitude(vec);\n                PrintFloat(mag);\n            }\n    ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EA64A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EA6100&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EA64A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',7,186)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EA64A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2138, in test_vector
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_vector_get_components" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2177, in test_vector_get_components&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector_get_components&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&#10;  result = &lt;TestCaseFunction test_vector_get_components&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_vector_get_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector_get_components&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_vector_get_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&gt;&#10;&#10;Function 'test_vector_get_components' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2177:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&#10;  script = '\n            void main()\n            {\n                vector vec = Vector(2.0, 4.0, 6.0);\n                PrintFloat(vec.x);\n                PrintFloat(vec.y);\n                PrintFloat(vec.z...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EACA00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EAC628&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EACA00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,208)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EACA00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2177, in test_vector_get_components&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2177, in test_vector_get_components
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector_get_components&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;
  result = &lt;TestCaseFunction test_vector_get_components&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_vector_get_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector_get_components&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;
  method = &lt;bound method TestNSSCompiler.test_vector_get_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;&gt;

Function 'test_vector_get_components' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2177:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_get_components&gt;
  script = '\n            void main()\n            {\n                vector vec = Vector(2.0, 4.0, 6.0);\n                PrintFloat(vec.x);\n                PrintFloat(vec.y);\n                PrintFloat(vec.z...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EACA00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EAC628&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EACA00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,208)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EACA00&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2177, in test_vector_get_components
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_vector_notation" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2157, in test_vector_notation&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector_notation&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&#10;  result = &lt;TestCaseFunction test_vector_notation&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_vector_notation of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector_notation&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_vector_notation of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&gt;&#10;&#10;Function 'test_vector_notation' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2157:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&#10;  script = '\n            void main()\n            {\n                vector vec = [1.0, 2.0, 3.0];\n                PrintFloat(vec.x);\n                PrintFloat(vec.y);\n                PrintFloat(vec.z);\n  ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EC30D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EC3040&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EC30D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',8,202)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EC30D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2157, in test_vector_notation&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2157, in test_vector_notation
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector_notation&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;
  result = &lt;TestCaseFunction test_vector_notation&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_vector_notation of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector_notation&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;
  method = &lt;bound method TestNSSCompiler.test_vector_notation of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;&gt;

Function 'test_vector_notation' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2157:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_notation&gt;
  script = '\n            void main()\n            {\n                vector vec = [1.0, 2.0, 3.0];\n                PrintFloat(vec.x);\n                PrintFloat(vec.y);\n                PrintFloat(vec.z);\n  ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EC30D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EC3040&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EC30D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',8,202)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EC30D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2157, in test_vector_notation
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_vector_set_components" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2198, in test_vector_set_components&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector_set_components&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&#10;  result = &lt;TestCaseFunction test_vector_set_components&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_vector_set_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_vector_set_components&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_vector_set_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&gt;&#10;&#10;Function 'test_vector_set_components' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2198:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&#10;  script = '\n            void main()\n            {\n                vector vec = Vector(0.0, 0.0, 0.0);\n                vec.x = 2.0;\n                vec.y = 4.0;\n                vec.z = 6.0;\n              ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ECA778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07ECA268&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ECA778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,295)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ECA778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 2198, in test_vector_set_components&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2198, in test_vector_set_components
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector_set_components&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;
  result = &lt;TestCaseFunction test_vector_set_components&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_vector_set_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_vector_set_components&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;
  method = &lt;bound method TestNSSCompiler.test_vector_set_components of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;&gt;

Function 'test_vector_set_components' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:2198:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_vector_set_components&gt;
  script = '\n            void main()\n            {\n                vector vec = Vector(0.0, 0.0, 0.0);\n                vec.x = 2.0;\n                vec.y = 4.0;\n                vec.z = 6.0;\n              ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ECA778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07ECA268&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ECA778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,295)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ECA778&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 2198, in test_vector_set_components
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_while_loop" time="0.016"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1336, in test_while_loop&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&#10;  result = &lt;TestCaseFunction test_while_loop&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&gt;&#10;&#10;Function 'test_while_loop' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1336:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&#10;  script = '\n            void main()\n            {\n                int value = 3;\n                while (value)\n                {\n                    PrintInteger(value);\n                    value -= 1;\n...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ED91A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07ED9118&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ED91A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',10,221)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ED91A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1336, in test_while_loop&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1336, in test_while_loop
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;
  result = &lt;TestCaseFunction test_while_loop&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;
  method = &lt;bound method TestNSSCompiler.test_while_loop of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;&gt;

Function 'test_while_loop' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1336:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop&gt;
  script = '\n            void main()\n            {\n                int value = 3;\n                while (value)\n                {\n                    PrintInteger(value);\n                    value -= 1;\n...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ED91A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07ED9118&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ED91A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',10,221)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07ED91A8&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1336, in test_while_loop
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_while_loop_scope" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1406, in test_while_loop_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&#10;  result = &lt;TestCaseFunction test_while_loop_scope&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop_scope&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&gt;&#10;&#10;Function 'test_while_loop_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1406:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&#10;  script = '\n            void main()\n            {\n                int value = 11;\n                int outer = 22;\n                while (value)\n                {\n                    int inner = 33;\n    ...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EE26D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EE2460&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EE26D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',16,385)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EE26D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1406, in test_while_loop_scope&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1406, in test_while_loop_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;
  result = &lt;TestCaseFunction test_while_loop_scope&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop_scope&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;
  method = &lt;bound method TestNSSCompiler.test_while_loop_scope of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;&gt;

Function 'test_while_loop_scope' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1406:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_scope&gt;
  script = '\n            void main()\n            {\n                int value = 11;\n                int outer = 22;\n                while (value)\n                {\n                    int inner = 33;\n    ...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EE26D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EE2460&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EE26D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',16,385)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EE26D0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1406, in test_while_loop_scope
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_while_loop_with_break" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1359, in test_while_loop_with_break&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop_with_break&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&#10;  result = &lt;TestCaseFunction test_while_loop_with_break&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop_with_break&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&gt;&#10;&#10;Function 'test_while_loop_with_break' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1359:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&#10;  script = '\n            void main()\n            {\n                int value = 3;\n                while (value)\n                {\n                    PrintInteger(value);\n                    value -= 1;\n...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EF70A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EEBB08&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EF70A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',11,248)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EF70A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1359, in test_while_loop_with_break&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1359, in test_while_loop_with_break
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop_with_break&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;
  result = &lt;TestCaseFunction test_while_loop_with_break&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop_with_break&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;
  method = &lt;bound method TestNSSCompiler.test_while_loop_with_break of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;&gt;

Function 'test_while_loop_with_break' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1359:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_break&gt;
  script = '\n            void main()\n            {\n                int value = 3;\n                while (value)\n                {\n                    PrintInteger(value);\n                    value -= 1;\n...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EF70A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EEBB08&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EF70A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',11,248)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EF70A0&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1359, in test_while_loop_with_break
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_compiler.TestNSSCompiler" name="test_while_loop_with_continue" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1381, in test_while_loop_with_continue&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop_with_continue&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&#10;  result = &lt;TestCaseFunction test_while_loop_with_continue&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNSSCompiler.test_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_while_loop_with_continue&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&#10;  method = &lt;bound method TestNSSCompiler.test_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&gt;&#10;&#10;Function 'test_while_loop_with_continue' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1381:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:&#10;  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&#10;  script = '\n            void main()\n            {\n                int value = 3;\n                while (value)\n                {\n                    PrintInteger(value);\n                    value -= 1;\n...&#10;  library = {}&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EFC538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EFC418&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EFC538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',12,289)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library={},&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EFC538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 1381, in test_while_loop_with_continue&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py&quot;, line 52, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1381, in test_while_loop_with_continue
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop_with_continue&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;
  result = &lt;TestCaseFunction test_while_loop_with_continue&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNSSCompiler.test_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_while_loop_with_continue&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;
  method = &lt;bound method TestNSSCompiler.test_while_loop_with_continue of &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;&gt;

Function 'test_while_loop_with_continue' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:1381:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py:52:
  self = &lt;resource.formats.test_ncs_compiler.TestNSSCompiler testMethod=test_while_loop_with_continue&gt;
  script = '\n            void main()\n            {\n                int value = 3;\n                while (value)\n                {\n                    PrintInteger(value);\n                    value -= 1;\n...
  library = {}
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EFC538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07EFC418&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EFC538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',12,289)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library={},
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07EFC538&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 1381, in test_while_loop_with_continue
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_compiler.py", line 52, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_ncs_interpreter.TestStack" name="test_copy_down_many" time="0.001" /><testcase classname="tests.resource.formats.test_ncs_interpreter.TestStack" name="test_copy_down_single" time="0.001" /><testcase classname="tests.resource.formats.test_ncs_interpreter.TestStack" name="test_move_negative" time="0.001" /><testcase classname="tests.resource.formats.test_ncs_interpreter.TestStack" name="test_move_zero" time="0.001" /><testcase classname="tests.resource.formats.test_ncs_interpreter.TestStack" name="test_peek_past_vector" time="0.001" /><testcase classname="tests.resource.formats.test_ncs_optimizer.TestNCSOptimizers" name="test_no_op_optimizer" time="0.000"><failure message="Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py&quot;, line 54, in test_no_op_optimizer&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py&quot;, line 47, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;Stack Trace Variables:&#10;&#10;Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:&#10;  self = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_no_op_optimizer&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;  test_case = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&#10;  isTest = True&#10;  old_success = True&#10;  exc_info = None&#10;&#10;Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:&#10;  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&#10;  result = &lt;TestCaseFunction test_no_op_optimizer&gt;&#10;  stopTestRun = None&#10;  testMethod = &lt;bound method TestNCSOptimizers.test_no_op_optimizer of &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&gt;&#10;  expecting_failure = False&#10;  outcome = _Outcome(&#10;    expecting_failure=False,&#10;    result=&lt;TestCaseFunction test_no_op_optimizer&gt;,&#10;    result_supports_subtests=False,&#10;    success=False,&#10;    skipped=[],&#10;    expectedFailure=None,&#10;    errors=[]&#10;)&#10;&#10;Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:&#10;  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&#10;  method = &lt;bound method TestNCSOptimizers.test_no_op_optimizer of &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&gt;&#10;&#10;Function 'test_no_op_optimizer' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py:54:&#10;  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&#10;&#10;Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py:47:&#10;  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&#10;  script = '\n            void main()\n            {\n                int value = 3;\n                while (value &gt; 0)\n                {\n                    if (value &gt; 0)\n                    {\n            ...&#10;  library = None&#10;  library_lookup = None&#10;  nssLexer = NssLexer(&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...&#10;)&#10;  nssParser = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library=None,&#10;    library_lookup=[]&#10;)&#10;  parser = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;&#10;Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = None&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;&#10;Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:&#10;  self = LRParser(&#10;    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,&#10;    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,&#10;    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,&#10;    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},&#10;    errorok=True,&#10;    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],&#10;    symstack=[$end, code_root],&#10;    state=171&#10;)&#10;  lexer = Lexer(&#10;    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,&#10;    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,&#10;    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;&#10;  debug = False&#10;  tracking = True&#10;  tokenfunc = None&#10;  lookahead = $end&#10;  lookaheadstack = []&#10;  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...&#10;  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...&#10;  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...&#10;  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}&#10;  pslice = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07F03C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;  errorcount = 0&#10;  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;&#10;  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07F03C28&gt;&gt;&#10;  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]&#10;  symstack = [$end, code_root]&#10;  errtoken = None&#10;  sym = function_definition&#10;  state = 171&#10;  ltype = '$end'&#10;  t = -17&#10;  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })&#10;  pname = 'function_definition'&#10;  plen = 8&#10;  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07F03C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...&#10;  t1 = LexToken(},'}',13,312)&#10;&#10;Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:&#10;  self = NssParser(&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,&#10;    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,&#10;    constants=[ScriptConstant(&quot;DataType.INT&quot;, &quot;NUM_INVENTORY_SLOTS&quot;, &quot;18&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;TRUE&quot;, &quot;1&quot;), ScriptConstant(&quot;DataType.INT&quot;, &quot;FALSE&quot;, &quot;0&quot;), ScriptConstant(&quot;DataType.FLOAT&quot;, &quot;DIR...,&#10;    library=None,&#10;    library_lookup=[]&#10;)&#10;  p = YaccProduction(&#10;    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07F03C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,&#10;    stack=[$end, code_root],&#10;    lexer=Lexer(&#10;        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,&#10;    parser=LRParser(&#10;        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...&#10;)&#10;Traceback (most recent call last):&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 59, in testPartExecutor&#10;    yield&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 592, in run&#10;    self._callTestMethod(testMethod)&#10;  File &quot;C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py&quot;, line 550, in _callTestMethod&#10;    method()&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py&quot;, line 54, in test_no_op_optimizer&#10;    ncs = self.compile(&#10;  File &quot;D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py&quot;, line 47, in compile&#10;    t = parser.parse(script, tracking=True)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 331, in parse&#10;    return self.parseopt(input, lexer, debug, tracking, tokenfunc)&#10;  File &quot;D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py&quot;, line 823, in parseopt&#10;    p.callable(pslice)&#10;  File &quot;D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py&quot;, line 191, in p_function_definition&#10;    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])&#10;TypeError: __init__() takes 4 positional arguments but 5 were given&#10;">Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py", line 54, in test_no_op_optimizer
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py", line 47, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given

TypeError: __init__() takes 4 positional arguments but 5 were given
Stack Trace Variables:

Function 'testPartExecutor' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:59:
  self = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_no_op_optimizer&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)
  test_case = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;
  isTest = True
  old_success = True
  exc_info = None

Function 'run' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:592:
  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;
  result = &lt;TestCaseFunction test_no_op_optimizer&gt;
  stopTestRun = None
  testMethod = &lt;bound method TestNCSOptimizers.test_no_op_optimizer of &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&gt;
  expecting_failure = False
  outcome = _Outcome(
    expecting_failure=False,
    result=&lt;TestCaseFunction test_no_op_optimizer&gt;,
    result_supports_subtests=False,
    success=False,
    skipped=[],
    expectedFailure=None,
    errors=[]
)

Function '_callTestMethod' at C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py:550:
  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;
  method = &lt;bound method TestNCSOptimizers.test_no_op_optimizer of &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;&gt;

Function 'test_no_op_optimizer' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py:54:
  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;

Function 'compile' at D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py:47:
  self = &lt;resource.formats.test_ncs_optimizer.TestNCSOptimizers testMethod=test_no_op_optimizer&gt;
  script = '\n            void main()\n            {\n                int value = 3;\n                while (value &gt; 0)\n                {\n                    if (value &gt; 0)\n                    {\n            ...
  library = None
  library_lookup = None
  nssLexer = NssLexer(
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...
)
  nssParser = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library=None,
    library_lookup=[]
)
  parser = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)

Function 'parse' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:331:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = None
  debug = False
  tracking = True
  tokenfunc = None

Function 'parseopt' at D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py:823:
  self = LRParser(
    productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), Mi...,
    action={0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRIN...,
    goto={0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initializatio...,
    defaulted_states={12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118},
    errorok=True,
    statestack=[0, 1, 9, 24, 27, 32, 58, 102, 139, 171],
    symstack=[$end, code_root],
    state=171
)
  lexer = Lexer(
    lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\...,
    lexretext=['(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSELF_VALUE&gt;OBJECT_SELF\\b)|(?P&lt;...,
    lexstatere={'INITIAL': [(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMME...&lt;truncated&gt;
  debug = False
  tracking = True
  tokenfunc = None
  lookahead = $end
  lookaheadstack = []
  actions = {0: {'INCLUDE': -2, 'STRUCT': -2, 'INT_TYPE': -2, 'FLOAT_TYPE': -2, 'OBJECT_TYPE': -2, 'VOID_TYPE': -2, 'EVENT_TYPE': -2, 'EFFECT_TYPE': -2, 'ITEMPROPERTY_TYPE': -2, 'LOCATION_TYPE': -2, 'STRING_TYPE'...
  goto = {0: {'code_root': 1}, 1: {'code_root_object': 2, 'function_definition': 3, 'include_script': 4, 'function_forward_declaration': 5, 'global_variable_declaration': 6, 'global_variable_initialization': 7...
  prod = [MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt; function_definition), MiniProduction...
  defaulted_states = {12: -106, 13: -107, 14: -108, 15: -109, 16: -110, 17: -111, 18: -112, 19: -113, 20: -114, 21: -115, 22: -116, 23: -117, 60: -118}
  pslice = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07F03C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
  errorcount = 0
  lex = &lt;module 'ply.lex' from 'D:\\a\\PyKotor\\PyKotor\\.venv_windows-2019_python_3.9_x86\\lib\\site-packages\\ply\\lex.py'&gt;
  get_token = &lt;bound method Lexer.token of &lt;ply.lex.Lexer object at 0x07F03C28&gt;&gt;
  statestack = [0, 1, 9, 24, 27, 32, 58, 102, 139, 171]
  symstack = [$end, code_root]
  errtoken = None
  sym = function_definition
  state = 171
  ltype = '$end'
  t = -17
  p = MiniProduction(function_definition -&gt; data_type IDENTIFIER ( function_definition_params ) { code_block })
  pname = 'function_definition'
  plen = 8
  targ = [function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07F03C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexToken()...
  t1 = LexToken(},'}',13,312)

Function 'p_function_definition' at D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py:191:
  self = NssParser(
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...,
    functions=[ScriptFunction(&lt;DataType.INT: 'int'&gt;, 'Random', [ScriptParam(&lt;DataType.INT: 'int'&gt;, 'nMaxInteger', None)], '// 0: Get an integer between 0 and nMaxInteger-1.\r\n// Return value on error: 0\...,
    constants=[ScriptConstant("DataType.INT", "NUM_INVENTORY_SLOTS", "18"), ScriptConstant("DataType.INT", "TRUE", "1"), ScriptConstant("DataType.INT", "FALSE", "0"), ScriptConstant("DataType.FLOAT", "DIR...,
    library=None,
    library_lookup=[]
)
  p = YaccProduction(
    slice=[function_definition, data_type, LexToken(IDENTIFIER,&lt;pykotor.resource.formats.ncs.compiler.classes.Identifier object at 0x07F03C88&gt;,2,18), LexToken((,'(',2,22), function_definition_params, LexT...,
    stack=[$end, code_root],
    lexer=Lexer(
        lexre=[(re.compile('(?P&lt;t_NEWLINE&gt;\\n+)|(?P&lt;t_NOP&gt;nop)|(?P&lt;t_COMMENT&gt;//[^\\n]*\\n)|(?P&lt;t_MULTILINE_COMMENT&gt;\\/\\*(\\*(?!\\/)|[^*])*\\*\\/)|(?P&lt;t_INCLUDE&gt;\\#include)|(?P&lt;t_OBJECTSE...,
    parser=LRParser(
        productions=[MiniProduction(S' -&gt; code_root), MiniProduction(code_root -&gt; code_root code_root_object), MiniProduction(code_root -&gt; &lt;empty&gt;), MiniProduction(code_root_object -&gt;...
)
Traceback (most recent call last):
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 59, in testPartExecutor
    yield
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "C:\Users\runneradmin\AppData\Local\Programs\Python\Python39-32\lib\unittest\case.py", line 550, in _callTestMethod
    method()
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py", line 54, in test_no_op_optimizer
    ncs = self.compile(
  File "D:\a\PyKotor\PyKotor\tests\resource\formats\test_ncs_optimizer.py", line 47, in compile
    t = parser.parse(script, tracking=True)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 331, in parse
    return self.parseopt(input, lexer, debug, tracking, tokenfunc)
  File "D:\a\PyKotor\PyKotor\.venv_windows-2019_python_3.9_x86\lib\site-packages\ply\yacc.py", line 823, in parseopt
    p.callable(pslice)
  File "D:\a\PyKotor\PyKotor\Libraries\PyKotor\src\pykotor\resource\formats\ncs\compiler\parser.py", line 191, in p_function_definition
    p[0] = FunctionDefinition(p[1], p[2], p[4], p[7])
TypeError: __init__() takes 4 positional arguments but 5 were given
</failure></testcase><testcase classname="tests.resource.formats.test_rim.TestRIM" name="test_binary_io" time="0.001" /><testcase classname="tests.resource.formats.test_rim.TestRIM" name="test_read_raises" time="0.001" /><testcase classname="tests.resource.formats.test_rim.TestRIM" name="test_write_raises" time="0.001" /><testcase classname="tests.resource.formats.test_ssf.TestSSF" name="test_binary_io" time="0.001" /><testcase classname="tests.resource.formats.test_ssf.TestSSF" name="test_read_raises" time="0.008" /><testcase classname="tests.resource.formats.test_ssf.TestSSF" name="test_write_raises" time="0.000" /><testcase classname="tests.resource.formats.test_ssf.TestSSF" name="test_xml_io" time="0.010" /><testcase classname="tests.resource.formats.test_tlk.TestTLK" name="test_binary_io" time="0.001" /><testcase classname="tests.resource.formats.test_tlk.TestTLK" name="test_json_io" time="0.002" /><testcase classname="tests.resource.formats.test_tlk.TestTLK" name="test_read_raises" time="0.005" /><testcase classname="tests.resource.formats.test_tlk.TestTLK" name="test_resize" time="0.001" /><testcase classname="tests.resource.formats.test_tlk.TestTLK" name="test_write_raises" time="0.000" /><testcase classname="tests.resource.formats.test_tlk.TestTLK" name="test_xml_io" time="0.005" /><testcase classname="tests.resource.formats.test_twoda.TestTwoDA" name="test_binary_io" time="0.001" /><testcase classname="tests.resource.formats.test_twoda.TestTwoDA" name="test_csv_io" time="0.001" /><testcase classname="tests.resource.formats.test_twoda.TestTwoDA" name="test_json_io" time="0.002" /><testcase classname="tests.resource.formats.test_twoda.TestTwoDA" name="test_read_raises" time="0.005" /><testcase classname="tests.resource.formats.test_twoda.TestTwoDA" name="test_row_max" time="0.000" /><testcase classname="tests.resource.formats.test_twoda.TestTwoDA" name="test_write_raises" time="0.001" /><testcase classname="tests.resource.formats.test_utm.TestUTM" name="test_io" time="0.001" /><testcase classname="tests.resource.formats.test_vis.TestVIS" name="test_binary_io" time="0.001" /><testcase classname="tests.resource.formats.test_vis.TestVIS" name="test_read_raises" time="0.001" /><testcase classname="tests.resource.formats.test_vis.TestVIS" name="test_write_raises" time="0.001" /><testcase classname="tests.resource.formats.test_wok.TestBWM" name="test_binary_io" time="0.581" /><testcase classname="tests.resource.generics.test_are.TestARE" name="test_gff_reconstruct" time="0.004"><failure message="AssertionError: &#13;&#10;  &#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot': '74' --&gt; '58'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtySizeTwo': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyFuncTwo': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyFuncOne': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyARGBThree': '12345'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyFuncThree': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtySizeThree': '1'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Rooms\0': '5' --&gt; '3'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Rooms\0\DisableWeather': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\Rooms\0\ForceRating': '1'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Rooms\1': '5' --&gt; '3'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Rooms\1\DisableWeather': '0'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\Rooms\1\ForceRating': '2'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Grass_Emissive': '16777215'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyFormulaOne': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\ChanceLightning': '99'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyARGBTwo': '1234'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\ChanceSnow': '99'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyFormulaThre': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtySizeOne': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\ChanceRain': '99'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyFormulaTwo': '1'&#13;&#10;  Missing 'Int32' field at 'GFFRoot\DirtyARGBOne': '123'&#10;assert False&#10; +  where False = compare(&lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07FA3910&gt;, log_func)&#10; +    where compare = &lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07F5DE68&gt;.compare&#10; +    and   log_func = &lt;resource.generics.test_are.TestARE testMethod=test_gff_reconstruct&gt;.log_func">E   AssertionError: 
      
      
      GFFStruct: number of fields have changed at 'GFFRoot': '74' --&gt; '58'
      Missing 'Int32' field at 'GFFRoot\DirtySizeTwo': '1'
      Missing 'Int32' field at 'GFFRoot\DirtyFuncTwo': '1'
      Missing 'Int32' field at 'GFFRoot\DirtyFuncOne': '1'
      Missing 'Int32' field at 'GFFRoot\DirtyARGBThree': '12345'
      Missing 'Int32' field at 'GFFRoot\DirtyFuncThree': '1'
      Missing 'Int32' field at 'GFFRoot\DirtySizeThree': '1'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Rooms\0': '5' --&gt; '3'
      Missing 'UInt8' field at 'GFFRoot\Rooms\0\DisableWeather': '1'
      Missing 'Int32' field at 'GFFRoot\Rooms\0\ForceRating': '1'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Rooms\1': '5' --&gt; '3'
      Missing 'UInt8' field at 'GFFRoot\Rooms\1\DisableWeather': '0'
      Missing 'Int32' field at 'GFFRoot\Rooms\1\ForceRating': '2'
      Missing 'UInt32' field at 'GFFRoot\Grass_Emissive': '16777215'
      Missing 'Int32' field at 'GFFRoot\DirtyFormulaOne': '1'
      Missing 'Int32' field at 'GFFRoot\ChanceLightning': '99'
      Missing 'Int32' field at 'GFFRoot\DirtyARGBTwo': '1234'
      Missing 'Int32' field at 'GFFRoot\ChanceSnow': '99'
      Missing 'Int32' field at 'GFFRoot\DirtyFormulaThre': '1'
      Missing 'Int32' field at 'GFFRoot\DirtySizeOne': '1'
      Missing 'Int32' field at 'GFFRoot\ChanceRain': '99'
      Missing 'Int32' field at 'GFFRoot\DirtyFormulaTwo': '1'
      Missing 'Int32' field at 'GFFRoot\DirtyARGBOne': '123'
    assert False
     +  where False = compare(&lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07FA3910&gt;, log_func)
     +    where compare = &lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07F5DE68&gt;.compare
     +    and   log_func = &lt;resource.generics.test_are.TestARE testMethod=test_gff_reconstruct&gt;.log_func</failure></testcase><testcase classname="tests.resource.generics.test_are.TestARE" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_are.py:54: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_are.TestARE" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_are.py:65: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_are.TestARE" name="test_io_construct" time="0.002" /><testcase classname="tests.resource.generics.test_are.TestARE" name="test_io_reconstruct" time="0.003" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_dlg.py:106: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_dlg.py:120: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_io_construct" time="0.006" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_io_reconstruct" time="0.007" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_k1_reconstruct" time="0.006" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_k1_reconstruct_from_reconstruct" time="0.007" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_k1_serialization" time="0.005" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_k2_reconstruct" time="0.009" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_k2_reconstruct_from_reconstruct" time="0.011" /><testcase classname="tests.resource.generics.test_dlg.TestDLG" name="test_k2_serialization" time="0.007" /><testcase classname="tests.resource.generics.test_dlg.TestDLGEntrySerialization" name="test_dlg_entry_serialization_all_attributes" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGEntrySerialization" name="test_dlg_entry_serialization_basic" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGEntrySerialization" name="test_dlg_entry_serialization_with_links" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGEntrySerialization" name="test_dlg_entry_with_circular_reference" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGEntrySerialization" name="test_dlg_entry_with_multiple_levels" time="0.002" /><testcase classname="tests.resource.generics.test_dlg.TestDLGEntrySerialization" name="test_dlg_entry_with_nested_replies" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGReplySerialization" name="test_dlg_reply_serialization_all_attributes" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGReplySerialization" name="test_dlg_reply_serialization_basic" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGReplySerialization" name="test_dlg_reply_serialization_with_links" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGReplySerialization" name="test_dlg_reply_with_circular_reference" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGReplySerialization" name="test_dlg_reply_with_multiple_levels" time="0.002" /><testcase classname="tests.resource.generics.test_dlg.TestDLGReplySerialization" name="test_dlg_reply_with_nested_entries" time="0.002"><failure message="IndexError: list index out of range">E   IndexError: list index out of range</failure></testcase><testcase classname="tests.resource.generics.test_dlg.TestDLGAnimationSerialization" name="test_dlg_animation_serialization_basic" time="0.000" /><testcase classname="tests.resource.generics.test_dlg.TestDLGAnimationSerialization" name="test_dlg_animation_serialization_default" time="0.000" /><testcase classname="tests.resource.generics.test_dlg.TestDLGAnimationSerialization" name="test_dlg_animation_serialization_with_custom_values" time="0.000" /><testcase classname="tests.resource.generics.test_dlg.TestDLGStuntSerialization" name="test_dlg_stunt_serialization_basic" time="0.000" /><testcase classname="tests.resource.generics.test_dlg.TestDLGStuntSerialization" name="test_dlg_stunt_serialization_default" time="0.000" /><testcase classname="tests.resource.generics.test_dlg.TestDLGStuntSerialization" name="test_dlg_stunt_serialization_with_custom_values" time="0.000" /><testcase classname="tests.resource.generics.test_dlg.TestDLGLinkSerialization" name="test_dlg_link_serialization_all_attributes" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGLinkSerialization" name="test_dlg_link_serialization_basic" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGLinkSerialization" name="test_dlg_link_serialization_with_node" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGLinkSerialization" name="test_dlg_link_with_circular_references" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGLinkSerialization" name="test_dlg_link_with_multiple_levels" time="0.001" /><testcase classname="tests.resource.generics.test_dlg.TestDLGLinkSerialization" name="test_dlg_link_with_nested_entries_and_replies" time="0.001"><failure message="assert 0 == 1&#10; +  where 0 = len([])&#10; +    where [] = DLGReply(text=R223, list_index=-1, links=[]).links&#10; +      where DLGReply(text=R223, list_index=-1, links=[]) = DLGLink(link_list_index=-1, comment=).node">E   assert 0 == 1
     +  where 0 = len([])
     +    where [] = DLGReply(text=R223, list_index=-1, links=[]).links
     +      where DLGReply(text=R223, list_index=-1, links=[]) = DLGLink(link_list_index=-1, comment=).node</failure></testcase><testcase classname="tests.resource.generics.test_git.TestGIT" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_git.py:51: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_git.TestGIT" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_git.py:62: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_git.TestGIT" name="test_io_construct" time="0.003" /><testcase classname="tests.resource.generics.test_git.TestGIT" name="test_io_reconstruct" time="0.003" /><testcase classname="tests.resource.generics.test_git.TestGIT" name="test_k1_gff_reconstruct" time="0.024"><failure message="AssertionError: &#13;&#10;  &#13;&#10;  Field 'Int32' is different at 'GFFRoot\AreaProperties\AmbientSndNitVol':&#13;&#10;  --- (old)AmbientSndNitVol&#10;  +++ (new)AmbientSndNitVol&#10;  @@ -1 +1 @@&#10;  -60&#10;  +82&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\0': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\0\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\0\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\1': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\1\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\1\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\2': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\2\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\2\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\3': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\3\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\3\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\4': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\4\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\4\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\5': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\5\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\5\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\6': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\6\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\6\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\7': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\7\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\7\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\8': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\8\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\8\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\9': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\9\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\9\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\10': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\10\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\10\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\11': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\11\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\11\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\12': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\12\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\12\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\13': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\13\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\13\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\14': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\14\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\14\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\15': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\15\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\15\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\16': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\16\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\16\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\17': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\17\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\17\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\18': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\18\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\18\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\19': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\19\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\19\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\20': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\20\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\20\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\21': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\21\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\21\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\22': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\22\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\22\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\23': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\23\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\23\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\24': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\24\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\24\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\25': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\25\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\25\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\26': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\26\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\26\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\27': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\27\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\27\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\28': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\28\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\28\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\29': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\29\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\29\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\30': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\30\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\30\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\31': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\31\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\31\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\32': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\32\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\32\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\33': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\33\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\33\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\34': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\34\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\34\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\35': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\35\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\35\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\36': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\36\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\36\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\37': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\37\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\37\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\38': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\38\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\38\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\39': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\39\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\39\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\40': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\40\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\40\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\41': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\41\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\41\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\42': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\42\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\42\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\43': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\43\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\43\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\44': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\44\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\44\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\45': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\45\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\45\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\46': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\46\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\46\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\47': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\47\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\47\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\48': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\48\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\48\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\49': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\49\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\49\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\50': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\50\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\50\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\51': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\51\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\51\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\52': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\52\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\52\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\53': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\53\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\53\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\54': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\54\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\54\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\55': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\55\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\55\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\56': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\56\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\56\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\57': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\57\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\57\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\58': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\58\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\58\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\59': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\59\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\59\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\60': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\60\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\60\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\61': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\61\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\61\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\62': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\62\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\62\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\63': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\63\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\63\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\64': '7' --&gt; '5'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Placeable List\64\UseTweakColor': '0'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Placeable List\64\TweakColor': '16777215'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\0': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\0\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\0\TweakColor': '3224629'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\1': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\1\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\1\TweakColor': '3224629'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\2': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\2\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\2\TweakColor': '5855577'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\3': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\3\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\3\TweakColor': '3817023'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\4': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\4\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\4\TweakColor': '3817023'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\5': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\5\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\5\TweakColor': '5855577'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\6': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\6\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\6\TweakColor': '3948352'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\7': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\7\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\7\TweakColor': '4540489'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\8': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\8\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\8\TweakColor': '4540489'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\9': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\9\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\9\TweakColor': '3948352'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\10': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\10\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\10\TweakColor': '4409159'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\11': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\11\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\11\TweakColor': '3948352'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\12': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\12\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\12\TweakColor': '3224629'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\13': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\13\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\13\TweakColor': '3224629'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\14': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\14\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\14\TweakColor': '3224629'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\15': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\15\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\15\TweakColor': '3224629'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\16': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\16\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\16\TweakColor': '3224629'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\17': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\17\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\17\TweakColor': '5855577'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\18': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\18\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\18\TweakColor': '3948352'&#13;&#10;  &#13;&#10;  GFFStruct: number of fields have changed at 'GFFRoot\Door List\19': '12' --&gt; '10'&#13;&#10;  Missing 'UInt8' field at 'GFFRoot\Door List\19\UseTweakColor': '1'&#13;&#10;  Missing 'UInt32' field at 'GFFRoot\Door List\19\TweakColor': '3224629'&#10;assert False&#10; +  where False = compare(&lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07FA0DF0&gt;, log_func)&#10; +    where compare = &lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07F635F8&gt;.compare&#10; +    and   log_func = &lt;resource.generics.test_git.TestGIT testMethod=test_k1_gff_reconstruct&gt;.log_func">E   AssertionError: 
      
      Field 'Int32' is different at 'GFFRoot\AreaProperties\AmbientSndNitVol':
      --- (old)AmbientSndNitVol
      +++ (new)AmbientSndNitVol
      @@ -1 +1 @@
      -60
      +82
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\0': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\0\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\0\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\1': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\1\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\1\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\2': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\2\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\2\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\3': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\3\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\3\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\4': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\4\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\4\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\5': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\5\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\5\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\6': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\6\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\6\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\7': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\7\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\7\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\8': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\8\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\8\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\9': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\9\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\9\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\10': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\10\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\10\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\11': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\11\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\11\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\12': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\12\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\12\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\13': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\13\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\13\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\14': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\14\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\14\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\15': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\15\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\15\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\16': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\16\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\16\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\17': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\17\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\17\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\18': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\18\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\18\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\19': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\19\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\19\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\20': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\20\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\20\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\21': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\21\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\21\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\22': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\22\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\22\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\23': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\23\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\23\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\24': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\24\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\24\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\25': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\25\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\25\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\26': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\26\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\26\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\27': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\27\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\27\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\28': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\28\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\28\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\29': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\29\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\29\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\30': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\30\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\30\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\31': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\31\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\31\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\32': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\32\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\32\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\33': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\33\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\33\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\34': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\34\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\34\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\35': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\35\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\35\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\36': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\36\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\36\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\37': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\37\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\37\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\38': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\38\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\38\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\39': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\39\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\39\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\40': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\40\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\40\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\41': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\41\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\41\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\42': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\42\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\42\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\43': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\43\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\43\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\44': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\44\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\44\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\45': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\45\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\45\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\46': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\46\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\46\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\47': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\47\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\47\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\48': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\48\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\48\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\49': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\49\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\49\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\50': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\50\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\50\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\51': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\51\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\51\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\52': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\52\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\52\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\53': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\53\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\53\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\54': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\54\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\54\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\55': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\55\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\55\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\56': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\56\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\56\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\57': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\57\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\57\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\58': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\58\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\58\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\59': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\59\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\59\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\60': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\60\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\60\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\61': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\61\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\61\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\62': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\62\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\62\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\63': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\63\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\63\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Placeable List\64': '7' --&gt; '5'
      Missing 'UInt8' field at 'GFFRoot\Placeable List\64\UseTweakColor': '0'
      Missing 'UInt32' field at 'GFFRoot\Placeable List\64\TweakColor': '16777215'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\0': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\0\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\0\TweakColor': '3224629'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\1': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\1\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\1\TweakColor': '3224629'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\2': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\2\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\2\TweakColor': '5855577'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\3': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\3\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\3\TweakColor': '3817023'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\4': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\4\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\4\TweakColor': '3817023'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\5': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\5\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\5\TweakColor': '5855577'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\6': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\6\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\6\TweakColor': '3948352'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\7': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\7\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\7\TweakColor': '4540489'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\8': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\8\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\8\TweakColor': '4540489'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\9': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\9\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\9\TweakColor': '3948352'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\10': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\10\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\10\TweakColor': '4409159'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\11': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\11\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\11\TweakColor': '3948352'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\12': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\12\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\12\TweakColor': '3224629'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\13': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\13\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\13\TweakColor': '3224629'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\14': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\14\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\14\TweakColor': '3224629'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\15': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\15\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\15\TweakColor': '3224629'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\16': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\16\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\16\TweakColor': '3224629'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\17': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\17\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\17\TweakColor': '5855577'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\18': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\18\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\18\TweakColor': '3948352'
      
      GFFStruct: number of fields have changed at 'GFFRoot\Door List\19': '12' --&gt; '10'
      Missing 'UInt8' field at 'GFFRoot\Door List\19\UseTweakColor': '1'
      Missing 'UInt32' field at 'GFFRoot\Door List\19\TweakColor': '3224629'
    assert False
     +  where False = compare(&lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07FA0DF0&gt;, log_func)
     +    where compare = &lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x07F635F8&gt;.compare
     +    and   log_func = &lt;resource.generics.test_git.TestGIT testMethod=test_k1_gff_reconstruct&gt;.log_func</failure></testcase><testcase classname="tests.resource.generics.test_git.TestGIT" name="test_k2_gff_reconstruct" time="0.004" /><testcase classname="tests.resource.generics.test_ifo.TestIFO" name="test_gff_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_ifo.TestIFO" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_ifo.py:49: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_ifo.TestIFO" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_ifo.py:60: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_ifo.TestIFO" name="test_io_construct" time="0.002" /><testcase classname="tests.resource.generics.test_ifo.TestIFO" name="test_io_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_jrl.TestJRL" name="test_gff_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_jrl.TestJRL" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_jrl.py:48: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_jrl.TestJRL" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_jrl.py:59: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_jrl.TestJRL" name="test_io_construct" time="0.001" /><testcase classname="tests.resource.generics.test_jrl.TestJRL" name="test_io_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_pth.TestPTH" name="test_gff_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_pth.TestPTH" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_pth.py:49: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_pth.TestPTH" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_pth.py:60: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_pth.TestPTH" name="test_io_construct" time="0.001" /><testcase classname="tests.resource.generics.test_pth.TestPTH" name="test_io_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_utc.TestUTC" name="test_gff_reconstruct" time="0.004" /><testcase classname="tests.resource.generics.test_utc.TestUTC" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utc.py:49: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utc.TestUTC" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utc.py:61: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utc.TestUTC" name="test_io_construct" time="0.003" /><testcase classname="tests.resource.generics.test_utc.TestUTC" name="test_io_reconstruct" time="0.003" /><testcase classname="tests.resource.generics.test_utd.TestUTD" name="test_gff_reconstruct" time="0.000"><skipped type="pytest.skip" message="This test is known to fail - fixme">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utd.py:72: This test is known to fail - fixme</skipped></testcase><testcase classname="tests.resource.generics.test_utd.TestUTD" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utd.py:50: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utd.TestUTD" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utd.py:61: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utd.TestUTD" name="test_io_construct" time="0.002" /><testcase classname="tests.resource.generics.test_utd.TestUTD" name="test_io_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_ute.TestUTE" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_ute.py:50: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_ute.TestUTE" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_ute.py:61: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_ute.TestUTE" name="test_io_construct" time="0.001" /><testcase classname="tests.resource.generics.test_ute.TestUTE" name="test_io_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_ute.TestUTE" name="test_k2_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_uti.TestUTI" name="test_gff_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_uti.TestUTI" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_uti.py:51: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_uti.TestUTI" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_uti.py:62: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_uti.TestUTI" name="test_io_construct" time="0.001" /><testcase classname="tests.resource.generics.test_uti.TestUTI" name="test_io_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_utp.Test" name="test_gff_reconstruct" time="0.003"><failure message="AssertionError: &#13;&#10;  &#13;&#10;  Extra 'UInt16' field found at 'GFFRoot\ItemList\0\Repos_PosY': '0'&#13;&#10;  Missing 'UInt16' field at 'GFFRoot\ItemList\0\Repos_Posy': '0'&#13;&#10;  Missing 'UInt16' field at 'GFFRoot\ItemList\1\Repos_Posy': '0'&#13;&#10;  Extra 'UInt16' field found at 'GFFRoot\ItemList\1\Repos_PosY': '0'&#10;assert False&#10; +  where False = compare(&lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x0465E988&gt;, log_func)&#10; +    where compare = &lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x04942100&gt;.compare&#10; +    and   log_func = &lt;resource.generics.test_utp.Test testMethod=test_gff_reconstruct&gt;.log_func">E   AssertionError: 
      
      Extra 'UInt16' field found at 'GFFRoot\ItemList\0\Repos_PosY': '0'
      Missing 'UInt16' field at 'GFFRoot\ItemList\0\Repos_Posy': '0'
      Missing 'UInt16' field at 'GFFRoot\ItemList\1\Repos_Posy': '0'
      Extra 'UInt16' field found at 'GFFRoot\ItemList\1\Repos_PosY': '0'
    assert False
     +  where False = compare(&lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x0465E988&gt;, log_func)
     +    where compare = &lt;pykotor.resource.formats.gff.gff_data.GFF object at 0x04942100&gt;.compare
     +    and   log_func = &lt;resource.generics.test_utp.Test testMethod=test_gff_reconstruct&gt;.log_func</failure></testcase><testcase classname="tests.resource.generics.test_utp.Test" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utp.py:51: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utp.Test" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utp.py:62: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utp.Test" name="test_io_construct" time="0.002" /><testcase classname="tests.resource.generics.test_utp.Test" name="test_io_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_uts.TestUTS" name="test_gff_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_uts.TestUTS" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_uts.py:52: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_uts.TestUTS" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_uts.py:63: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_uts.TestUTS" name="test_io_construct" time="0.001" /><testcase classname="tests.resource.generics.test_uts.TestUTS" name="test_io_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_uts.TestUTS" name="test_k1_gff_reconstruct" time="0.002" /><testcase classname="tests.resource.generics.test_utt.TestUTT" name="test_gff_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_utt.TestUTT" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utt.py:51: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utt.TestUTT" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utt.py:62: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utt.TestUTT" name="test_io_construct" time="0.001" /><testcase classname="tests.resource.generics.test_utt.TestUTT" name="test_io_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_utw.TestUTW" name="test_gff_reconstruct" time="0.001" /><testcase classname="tests.resource.generics.test_utw.TestUTW" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utw.py:50: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utw.TestUTW" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\resource\generics\test_utw.py:61: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.resource.generics.test_utw.TestUTW" name="test_io_construct" time="0.001" /><testcase classname="tests.resource.generics.test_utw.TestUTW" name="test_io_reconstruct" time="0.001" /><testcase classname="tests.resource.test_replace_module_extensions.TestReplaceModuleExtensions" name="testreplace_module_extensions" time="0.001" /><testcase classname="tests.resource.test_resource_from_path.TestResourceType" name="test_from_extension" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceType" name="test_from_id" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceType" name="test_from_invalid" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceType" name="test_from_invalid_with_valid_extension" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceType" name="test_from_path_long_extension" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceType" name="test_resource_type_hashing" time="0.001" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_empty_file_path" time="0.001" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_hidden_file" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_invalid_extension" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_long_extension" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_long_suffix_gff_xml" time="0.001"><failure message="AssertionError: &#10;  resname: 'asdf.xyz.qwerty.gff' restype: 'XML'&#10;  expected resname: 'asdf.xyz.qwerty' expected restype: 'GFF.XML'&#10;assert 'asdf.xyz.qwerty.gff' == 'asdf.xyz.qwerty'&#10;  &#10;  - asdf.xyz.qwerty&#10;  + asdf.xyz.qwerty.gff&#10;  ?                ++++">E   AssertionError: 
      resname: 'asdf.xyz.qwerty.gff' restype: 'XML'
      expected resname: 'asdf.xyz.qwerty' expected restype: 'GFF.XML'
    assert 'asdf.xyz.qwerty.gff' == 'asdf.xyz.qwerty'
      
      - asdf.xyz.qwerty
      + asdf.xyz.qwerty.gff
      ?                ++++</failure></testcase><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_mdl" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_no_extension" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_none_file_path" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_tga" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_tlk_xml" time="0.001"><failure message="AssertionError: &#10;  resname: 'asdf.Tlk' restype: 'XML'&#10;  expected resname: 'asdf' expected restype: 'TLK.XML'&#10;assert 'asdf.Tlk' == 'asdf'&#10;  &#10;  - asdf&#10;  + asdf.Tlk">E   AssertionError: 
      resname: 'asdf.Tlk' restype: 'XML'
      expected resname: 'asdf' expected restype: 'TLK.XML'
    assert 'asdf.Tlk' == 'asdf'
      
      - asdf
      + asdf.Tlk</failure></testcase><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_trailing_dot" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_from_path_wav" time="0.000" /><testcase classname="tests.resource.test_resource_from_path.TestResourceIdentifier" name="test_hashing" time="0.001" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_add" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_assert_str_type" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_capitalize" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_casefold" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_cast" time="0.000"><failure message="AttributeError: type object 'WrappedStr' has no attribute 'cast'">E   AttributeError: type object 'WrappedStr' has no attribute 'cast'</failure></testcase><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_center" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_contains" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_count" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_deepcopy" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_encode" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_endswith" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_eq" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_expandtabs" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_find" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_format" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_format_map" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_ge" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_getitem" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_getnewargs" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_getstate" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_gt" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_hash" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_index" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_init" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isalnum" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isalpha" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isascii" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isdecimal" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isdigit" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isidentifier" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_islower" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isnumeric" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isprintable" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isspace" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_istitle" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_isupper" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_iter" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_join" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_le" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_len" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_ljust" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_lower" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_lstrip" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_lt" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_maketrans" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_mod" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_mul" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_ne" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_partition" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_radd" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_removeprefix" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_removesuffix" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_replace" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_repr" time="0.001"><failure message="assert &quot;MutableStr('test')&quot; == 'MutableStr(test)'&#10;  &#10;  - MutableStr(test)&#10;  + MutableStr('test')&#10;  ?            +    +">E   assert "MutableStr('test')" == 'MutableStr(test)'
      
      - MutableStr(test)
      + MutableStr('test')
      ?            +    +</failure></testcase><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_rfind" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_rindex" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_rjust" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_rmul" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_rpartition" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_rsplit" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_rstrip" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_setattr" time="0.000"><failure message="AssertionError: RuntimeError not raised">E   AssertionError: RuntimeError not raised</failure></testcase><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_split" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_splitlines" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_startswith" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_str" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_strip" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_swapcase" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_title" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_translate" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_upper" time="0.000" /><testcase classname="tests.test_wrapped_str.TestMutableStr" name="test_zfill" time="0.000" /><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_coerce_str" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_contains" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_endswith" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_eq" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_find" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_hash" time="0.001"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_init" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_ne" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_partition" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_replace" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_rfind" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_rpartition" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_rsplit" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_split" time="0.000"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.test_wrapped_str.TestCaseInsensImmutableStr" name="test_split_by_indices" time="0.001"><failure message="NameError: name 'CaseInsensImmutableStr' is not defined">E   NameError: name 'CaseInsensImmutableStr' is not defined</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_are_editor.AREEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_are_editor.py:93: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_are_editor.AREEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_are_editor.py:110: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_are_editor.AREEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_are_editor.py:126: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_are_editor.AREEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_are_editor.py:80: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_bwm_editor.BWMEditorTest" name="test_bwm_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_bwm_editor.py:93: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_bwm_editor.BWMEditorTest" name="test_bwm_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_bwm_editor.py:108: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_bwm_editor.BWMEditorTest" name="test_placeholder" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_bwm_editor.py:142: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_bwm_editor.BWMEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_bwm_editor.py:80: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_dlg_editor.TestDLGStandardItemModel" name="test_dictionaries_filled_correctly" time="2.970"><failure message="UnboundLocalError: local variable 'i' referenced before assignment">E   UnboundLocalError: local variable 'i' referenced before assignment</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_dlg_editor.TestDLGStandardItemModel" name="test_hashing" time="0.023"><failure message="UnboundLocalError: local variable 'i' referenced before assignment">E   UnboundLocalError: local variable 'i' referenced before assignment</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_dlg_editor.TestDLGStandardItemModel" name="test_link_list_index_sync" time="0.022"><failure message="UnboundLocalError: local variable 'i' referenced before assignment">E   UnboundLocalError: local variable 'i' referenced before assignment</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_dlg_editor.TestDLGStandardItemModel" name="test_move_item_to_index" time="0.022"><failure message="UnboundLocalError: local variable 'i' referenced before assignment">E   UnboundLocalError: local variable 'i' referenced before assignment</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_dlg_editor.TestDLGStandardItemModel" name="test_paste_item" time="0.023"><failure message="UnboundLocalError: local variable 'i' referenced before assignment">E   UnboundLocalError: local variable 'i' referenced before assignment</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_dlg_editor.TestDLGStandardItemModel" name="test_serialize_mime_data" time="0.023"><failure message="UnboundLocalError: local variable 'i' referenced before assignment">E   UnboundLocalError: local variable 'i' referenced before assignment</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_dlg_editor.TestDLGStandardItemModel" name="test_shift_item" time="0.022"><failure message="UnboundLocalError: local variable 'i' referenced before assignment">E   UnboundLocalError: local variable 'i' referenced before assignment</failure></testcase><testcase classname="tests.toolset_tests.gui.editors.test_erf_editor.ERFEditorTest" name="test_erf_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_erf_editor.py:93: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_erf_editor.ERFEditorTest" name="test_erf_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_erf_editor.py:108: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_erf_editor.ERFEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_erf_editor.py:142: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_erf_editor.ERFEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_erf_editor.py:81: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_gff_editor.GFFEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_gff_editor.py:168: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_gff_editor.GFFEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_gff_editor.py:185: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_gff_editor.GFFEditorTest" name="test_placeholder" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_gff_editor.py:202: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_gff_editor.GFFEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_gff_editor.py:154: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_git_editor.GITEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_git_editor.py:98: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_git_editor.GITEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_git_editor.py:114: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_git_editor.GITEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_git_editor.py:130: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_git_editor.GITEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_git_editor.py:85: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_jrl_editor.JRLEditorTest" name="test_editor_init" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_jrl_editor.py:124: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_jrl_editor.JRLEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_jrl_editor.py:92: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_jrl_editor.JRLEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_jrl_editor.py:108: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_jrl_editor.JRLEditorTest" name="test_save_and_load" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_jrl_editor.py:79: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_nss_editor.NSSEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_nss_editor.py:111: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_nss_editor.NSSEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_nss_editor.py:80: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ssf_editor.SSFEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ssf_editor.py:141: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ssf_editor.SSFEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ssf_editor.py:80: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ssf_editor.SSFEditorTest" name="test_ssf_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ssf_editor.py:92: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ssf_editor.SSFEditorTest" name="test_ssf_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ssf_editor.py:107: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_tlk_editor.TLKEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_tlk_editor.py:79: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_tpc_editor.TPCEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_tpc_editor.py:69: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_twoda_editor.TwoDAEditorTest" name="test_2da_save_load_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_twoda_editor.py:93: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_twoda_editor.TwoDAEditorTest" name="test_2da_save_load_from_k2_installation" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_twoda_editor.py:109: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_twoda_editor.TwoDAEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_twoda_editor.py:144: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_twoda_editor.TwoDAEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_twoda_editor.py:79: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_txt_editor.TXTEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_txt_editor.py:51: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utc_editor.UTCEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utc_editor.py:105: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utc_editor.UTCEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utc_editor.py:123: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utc_editor.UTCEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utc_editor.py:77: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utc_editor.UTCEditorTest" name="test_save_and_load_validate" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utc_editor.py:90: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utd_editor.UTDEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utd_editor.py:94: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utd_editor.UTDEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.001"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utd_editor.py:110: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utd_editor.UTDEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utd_editor.py:126: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utd_editor.UTDEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K1_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utd_editor.py:81: K1_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ute_editor.UTEEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ute_editor.py:92: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ute_editor.UTEEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ute_editor.py:108: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ute_editor.UTEEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ute_editor.py:124: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_ute_editor.UTEEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_ute_editor.py:79: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uti_editor.UTIEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uti_editor.py:93: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uti_editor.UTIEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uti_editor.py:109: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uti_editor.UTIEditorTest" name="test_open_and_save" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uti_editor.py:125: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uti_editor.UTIEditorTest" name="test_save_and_load" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uti_editor.py:80: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utm_editor.UTMEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utm_editor.py:93: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utm_editor.UTMEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utm_editor.py:109: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utm_editor.UTMEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utm_editor.py:125: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utm_editor.UTMEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utm_editor.py:80: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utp_editor.UTPEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utp_editor.py:92: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utp_editor.UTPEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utp_editor.py:108: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utp_editor.UTPEditorTest" name="test_open_and_save" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utp_editor.py:124: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utp_editor.UTPEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utp_editor.py:79: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uts_editor.UTSEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uts_editor.py:92: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uts_editor.UTSEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uts_editor.py:108: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uts_editor.UTSEditorTest" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uts_editor.py:124: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_uts_editor.UTSEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_uts_editor.py:79: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utt_editor.UTTEditorTest" name="test_editor_init" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utt_editor.py:126: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utt_editor.UTTEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utt_editor.py:94: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utt_editor.UTTEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utt_editor.py:110: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utt_editor.UTTEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utt_editor.py:81: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utw_editor.UTWEditorTest" name="test_editor_init" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utw_editor.py:123: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utw_editor.UTWEditorTest" name="test_gff_reconstruct_from_k1_installation" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utw_editor.py:91: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utw_editor.UTWEditorTest" name="test_gff_reconstruct_from_k2_installation" time="0.001"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utw_editor.py:107: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.toolset_tests.gui.editors.test_utw_editor.UTWEditorTest" name="test_save_and_load" time="0.000"><skipped type="pytest.skip" message="K2_PATH environment variable is not set or not found on disk.">D:\a\PyKotor\PyKotor\tests\toolset_tests\gui\editors\test_utw_editor.py:78: K2_PATH environment variable is not set or not found on disk.</skipped></testcase><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_capsule_exists_false" time="0.001"><skipped type="pytest.skip" message="broken test">D:\a\PyKotor\PyKotor\tests\tslpatcher\test_config.py:112: broken test</skipped></testcase><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_capsule_exists_true" time="0.013" /><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_capsule_exists_true_no_file" time="0.010" /><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_no_capsule_exists_false" time="0.000"><skipped type="pytest.skip" message="broken test">D:\a\PyKotor\PyKotor\tests\tslpatcher\test_config.py:95: broken test</skipped></testcase><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_no_capsule_exists_false_no_file" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_no_capsule_exists_true" time="0.000"><skipped type="pytest.skip" message="broken test">D:\a\PyKotor\PyKotor\tests\tslpatcher\test_config.py:78: broken test</skipped></testcase><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_no_capsule_exists_true_no_file" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_replace_file_true" time="0.000"><skipped type="pytest.skip" message="broken test">D:\a\PyKotor\PyKotor\tests\tslpatcher\test_config.py:47: broken test</skipped></testcase><testcase classname="tests.tslpatcher.test_config.TestLookupResourceFunction" name="test_lookup_resource_replace_file_true_no_file" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_capsule_not_exist" time="0.011"><failure message="assert not True">E   assert not True</failure></testcase><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_default_behavior" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_not_replace_file_exists_skip_false" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_exists_destination_capsule" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_exists_destination_dot" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_exists_destination_override" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_exists_saveas_destination_capsule" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_exists_saveas_destination_dot" time="0.009" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_exists_saveas_destination_override" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_not_exists_destination_capsule" time="0.009" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_not_exists_destination_override" time="0.008" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_not_exists_saveas_destination_capsule" time="0.009" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_replace_file_not_exists_saveas_destination_override" time="0.009" /><testcase classname="tests.tslpatcher.test_config.TestShouldPatchFunction" name="test_skip_if_not_replace_not_replace_file_exists" time="0.008" /><testcase classname="tests.tslpatcher.test_memory.TestLocalizedStringDelta" name="test_apply_stringref_2damemory" time="0.001" /><testcase classname="tests.tslpatcher.test_memory.TestLocalizedStringDelta" name="test_apply_stringref_int" time="0.000" /><testcase classname="tests.tslpatcher.test_memory.TestLocalizedStringDelta" name="test_apply_stringref_none" time="0.000" /><testcase classname="tests.tslpatcher.test_memory.TestLocalizedStringDelta" name="test_apply_stringref_tlkmemory" time="0.000" /><testcase classname="tests.tslpatcher.test_memory.TestLocalizedStringDelta" name="test_apply_substring" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateTLK" name="test_apply_append" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateTLK" name="test_apply_replace" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_2damemory_rowindex" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_assign_2damemory" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_assign_high" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_assign_tlkmemory" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_exclusive_badcolumn" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_exclusive_exists" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_exclusive_none" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_exclusive_notexists" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_rowlabel_existing" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_rowlabel_use_constant" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_add_rowlabel_use_maxrowlabel" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_addcolumn_2damemory_index" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_addcolumn_2damemory_line" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_addcolumn_default" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_addcolumn_empty" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_addcolumn_rowindex_constant" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_addcolumn_rowlabel_2damemory" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_addcolumn_rowlabel_tlkmemory" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_change_assign_2damemory" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_change_assign_high" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_change_assign_tlkmemory" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_change_existing_labelindex" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_change_existing_rowindex" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_change_existing_rowlabel" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_2damemory_rowindex" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_assign_2damemory" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_assign_high" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_assign_tlkmemory" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_exclusive_exists" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_exclusive_none" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_exclusive_notexists" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_existing_rowindex" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_existing_rowlabel" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_copy_set_newrowlabel" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_set_2damemory_columnlabel" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_set_2damemory_rowindex" time="0.000" /><testcase classname="tests.tslpatcher.test_mods.TestManipulate2DA" name="test_set_2damemory_rowlabel" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_add_field_locstring" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_add_nested" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_add_newnested" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_add_use_2damemory" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_add_use_tlkmemory" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_addlist_listindex" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_addlist_store_2damemory" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_2damemory" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_double" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_int16" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_int32" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_int64" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_int8" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_locstring" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_single" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_string" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_uint16" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_uint32" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_uint64" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_uint8" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_vector3" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_field_vector4" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_nested" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateGFF" name="test_modify_tlkmemory" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateSSF" name="test_assign_2datoken" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateSSF" name="test_assign_int" time="0.001" /><testcase classname="tests.tslpatcher.test_mods.TestManipulateSSF" name="test_assign_tlktoken" time="0.001" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addcolumn_2damemory" time="0.006" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addcolumn_basic" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addcolumn_indexinsert" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addcolumn_labelinsert" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addrow_cells" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addrow_exclusivecolumn" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addrow_identifier" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addrow_rowlabel" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_addrow_store2da" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_changerow_cells" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_changerow_identifier" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_changerow_store2da" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_changerow_targets" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_copyrow_cells" time="0.013" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_copyrow_exclusivecolumn" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_copyrow_high" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_copyrow_identifier" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_copyrow_rowlabel" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_copyrow_store2da" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_2da_copyrow_target" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_floats" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_inside_list" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_inside_struct" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_ints" time="0.006" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_locstring" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_resref" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_string" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_vector3" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_add_vector4" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_2damemory" time="0.006" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_pathing" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_tlkmemory" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_type_int" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_type_locstring" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_type_string" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_type_vector3" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_gff_modify_type_vector4" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_ssf_replace" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_ssf_set" time="0.007" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_ssf_stored_2da" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_ssf_stored_constant" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_ssf_stored_tlk" time="0.005" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_tlk_appendfile_functionality" time="0.006" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_tlk_complex_changes" time="0.015" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_tlk_replacefile_functionality" time="0.007" /><testcase classname="tests.tslpatcher.test_reader.TestConfigReader" name="test_tlk_strref_default_functionality" time="0.007" /></testsuite></testsuites>